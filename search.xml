<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Redis进阶</title>
    <url>/2020/03/14/Redis%E8%BF%9B%E9%98%B6/</url>
    <content><![CDATA[<h1 id="Redis发布订阅"><a href="#Redis发布订阅" class="headerlink" title="Redis发布订阅"></a>Redis发布订阅</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p>Redis发布订阅(pub/sub)是一种消息通信模式:发送者(pub)发送消息,订阅者(sub)接收消息。<br>Redis窖户端可以订阅任意数量的频道。</p>
</blockquote>
<p>下图展示了频道channe11 ，以及订阅这个频道的三个客户端 一client2 、client5 和client1之间的关系</p>
<p><a href="/2020/03/14/Redis%E8%BF%9B%E9%98%B6/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E5%85%B3%E7%B3%BB.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2020/03/14/Redis%E8%BF%9B%E9%98%B6/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E5%85%B3%E7%B3%BB.png" class="lazyload"></a></p>
<p>当有新消息通过PUBLISH命令发送给频道channel1 时，这个消息就会被发送始订阅它的三个客户端:</p>
<p><a href="/2020/03/14/Redis%E8%BF%9B%E9%98%B6/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%852.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2020/03/14/Redis%E8%BF%9B%E9%98%B6/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%852.png" class="lazyload"></a></p>
<p>配置订阅和发布</p>
<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><h3 id="订阅频道"><a href="#订阅频道" class="headerlink" title="订阅频道"></a>订阅频道</h3><blockquote>
<p>SUBSCRIBE channel [channe1 …] :订阅给定的一个或多个频道的信息<br>PSUBSCRIBE pattern [pattern …] :订阅-一个或多个符合给定模式的频道。</p>
</blockquote>
<h3 id="发布频道"><a href="#发布频道" class="headerlink" title="发布频道:"></a>发布频道:</h3><blockquote>
<p>PUBLISH channe1 message :将信息发送到指定的频道。</p>
</blockquote>
<h3 id="退订频道"><a href="#退订频道" class="headerlink" title="退订频道:"></a>退订频道:</h3><blockquote>
<p>UNSUBSCRIBE [channel [channel …]] :指退订给定的频道。<br>PUNSUBSCRIBE [pattern [pattern …]]: 退订所有给定模式的频道。</p>
</blockquote>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><blockquote>
<p>这一功能最明显的用法就是构建实时消息系统,比如普通的即时聊天,群聊等功能<br>1、在一个博客网站中。有100个粉丝订阅了你,当你发布新文章。就可以推送消息给粉丝们。<br>2、微信公众号模式<br>微博,每个用户的粉丝都是该用户的订阅者，当用户发完微博 ,所有粉丝都将收 到他的动态;<br>新闻，资讯站点通常有多个频道.每个频道就是一个主题,用户可以通过主题来做订阅(如RSS) ,这样当新闻发布时,订阅者可以获得更新</p>
<p>简单的应用场量的话，以门户网站为例当编辑更新了某推荐板块的内容后:</p>
<p>1、CMS发布清除缓存的消息到channel (推送者推送消息)<br>2、门户网站的缓存系统通过chanel收到清除缓存的消息(订阅者收到消息) ,更新了推荐板块的缓存<br>3、还可以做集中配置中心管理,当配置信息发生更改后, 订阅配置信息的节点都可以收到通知消息</p>
</blockquote>
<h1 id="Redis多数据库"><a href="#Redis多数据库" class="headerlink" title="Redis多数据库"></a>Redis多数据库</h1><p>Redis下,数据库是由一个整数索引标识,而不是由一个数据库名称。默认情况下,一个客户端连接到数据库0。</p>
<p><strong>redis配置文件中下面的参数来控制数据库总数;</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">database 16 &#x2F;&#x2F;从0开始</span><br></pre></td></tr></table></figure></div>

<p><strong>select数据库 //数据库的切换</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select index</span><br></pre></td></tr></table></figure></div>

<p><strong>移动数据(将当前key移动另个库)</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">move key名称 数掘库</span><br></pre></td></tr></table></figure></div>

<p>数据库清空;</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flushdb :清除当前数据库的所有key</span><br><span class="line">flushall :清除整个Redis的数据库所有key</span><br></pre></td></tr></table></figure></div>

<h1 id="Redis事务"><a href="#Redis事务" class="headerlink" title="Redis事务"></a>Redis事务</h1><p>Redis事务可以一次执行多个命令，( 按顺序地串行化执行,执行中不会被其它命令插入，不许加塞)</p>
<h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p>Redis事务可以一次执行多个命令(允许在-一次单独的步骤中执行一组命令) ,并且带有以下两个重要的保证:</p>
<blockquote>
<p>批量操作在发送EXEC命令前被放入队列缓存。<br>收到EXEC命令后进入事务执行,事务中任意命令执行失败,其余的命令依然被执行。<br>在事务执行过程,其他客户端提交的命令请求不会插入到事务执行命令序列中。</p>
</blockquote>
<p>1、Redis会将一个事务中的所有命令序列化,然后按顺序执行<br>2、执行中不会被其它命令插入,不许出现加赛行为</p>
<h2 id="命令-1"><a href="#命令-1" class="headerlink" title="命令"></a>命令</h2><blockquote>
<p>DISCARD<br>            :取消事务，放弃执行事务块内的所有命令。<br>EXEC<br>            :执行所有事务块内的命令。<br>MULTI<br>            :标记一个事务决的开始。<br>UNWATCH<br>            :取消WATCH 命令对所有key的监视。<br>WATCH key [key ..]<br>            :监视一个(或多个) key， 如果在事务执行之前这个(或这些) key被其他命令所改动,那么事务将被打断。</p>
</blockquote>
<p><strong>一个事务从开始到执行会经历以下三个阶段:</strong><br>开始事务。<br>命令入队。<br>执行事务。</p>
<h2 id="示例1-MULTI-EXEC"><a href="#示例1-MULTI-EXEC" class="headerlink" title="示例1 MULTI EXEC"></a>示例1 MULTI EXEC</h2><p>转账功能，A向B转账50元</p>
<p><a href="/2020/03/14/Redis%E8%BF%9B%E9%98%B6/%E8%BD%AC%E8%B4%A6%E4%BA%8B%E5%8A%A1%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2020/03/14/Redis%E8%BF%9B%E9%98%B6/%E8%BD%AC%E8%B4%A6%E4%BA%8B%E5%8A%A1%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B.png" class="lazyload"></a></p>
<p>1、输入Multi命令开始,输入的命令都会依次进入命令队列中,但不会执行<br>2、直到输入Exec后，Redis会将之前的命令队列中的命令依次执行</p>
<h2 id="示例2-DISCARD-放弃队列运行"><a href="#示例2-DISCARD-放弃队列运行" class="headerlink" title="示例2 DISCARD 放弃队列运行"></a>示例2 DISCARD 放弃队列运行</h2><p><a href="/2020/03/14/Redis%E8%BF%9B%E9%98%B6/DISCARD%E6%94%BE%E5%BC%83%E9%98%9F%E5%88%97%E8%BF%90%E8%A1%8C.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2020/03/14/Redis%E8%BF%9B%E9%98%B6/DISCARD%E6%94%BE%E5%BC%83%E9%98%9F%E5%88%97%E8%BF%90%E8%A1%8C.png" class="lazyload"></a></p>
<p>1、输入Multi命令开始,输入的命令都会依次进入命令队列中,但不会执行<br>2、直到输入Exec后, Redis会将之前的命令队列中的命令依次执行。<br>3、命令队列的过程中可以通过discard来放弃队列运行</p>
<h2 id="示例3事务的错误处理"><a href="#示例3事务的错误处理" class="headerlink" title="示例3事务的错误处理"></a>示例3事务的错误处理</h2><p>事务的错误处理:<br>如果执行的某个命令报出了错误,则只有报错的命令不会被执行,而其它的命令都会执行,不会回滚。</p>
<p><a href="/2020/03/14/Redis%E8%BF%9B%E9%98%B6/%E4%BA%8B%E5%8A%A1%E7%9A%84%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2020/03/14/Redis%E8%BF%9B%E9%98%B6/%E4%BA%8B%E5%8A%A1%E7%9A%84%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86.png" class="lazyload"></a></p>
<h2 id="示例4事务的错误处理"><a href="#示例4事务的错误处理" class="headerlink" title="示例4事务的错误处理"></a>示例4事务的错误处理</h2><p>事务的错误处理:<br>队列中的某个命令出现了报告错误,执行时整个的所有队列都会被取消。</p>
<p><a href="/2020/03/14/Redis%E8%BF%9B%E9%98%B6/%E4%BA%8B%E5%8A%A1%E6%8A%A5%E5%91%8A%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2020/03/14/Redis%E8%BF%9B%E9%98%B6/%E4%BA%8B%E5%8A%A1%E6%8A%A5%E5%91%8A%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86.png" class="lazyload"></a></p>
<h2 id="示例5事务的WATCH"><a href="#示例5事务的WATCH" class="headerlink" title="示例5事务的WATCH"></a>示例5事务的WATCH</h2><p>WATCH key [key …]<br>:监视一个(或多个) key , 如果在事务执行之前这个(或这些) key被其他命令所改动,那么事务将被打断。</p>
<p><strong>需求:某一帐户在一事务内进行操作,在提交事务前,另一个进程对该帐户进行操作。</strong></p>
<p><a href="/2020/03/14/Redis%E8%BF%9B%E9%98%B6/%E4%BA%8B%E5%8A%A1%E7%9A%84WATCH.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2020/03/14/Redis%E8%BF%9B%E9%98%B6/%E4%BA%8B%E5%8A%A1%E7%9A%84WATCH.png" class="lazyload"></a></p>
<h2 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h2><p>一组命令必须同时都执行,或者都不执行。<br>我们想要保证一组命令 在执行的过程之中不被其它命令插入。</p>
<h1 id="Redis-数据淘汰策略-redis-conf"><a href="#Redis-数据淘汰策略-redis-conf" class="headerlink" title="Redis 数据淘汰策略 redis.conf"></a>Redis 数据淘汰策略 redis.conf</h1><blockquote>
<p>Reds官方给的警告，当内存不足时，Redis会根据配置的缓存策略淘汰部分Keys,以保证写入成功.当无淘汰策略时或没有找到适合淘汰的Key时,Redis直接返回out of memory错误。</p>
</blockquote>
<h2 id="最大缓存配置"><a href="#最大缓存配置" class="headerlink" title="最大缓存配置"></a><strong>最大缓存配置</strong></h2><p>在redis中，允许用户设置最大使用内存大小<br>maxmemory 512G</p>
<h2 id="redis提供6种数据淘汰策略"><a href="#redis提供6种数据淘汰策略" class="headerlink" title="redis提供6种数据淘汰策略:"></a>redis提供6种数据淘汰策略:</h2><ul>
<li>volatile-lru:从已设置过期时间的数据集中挑选最近最少使用的数据淘汰</li>
<li>volatile-lfu:从已设置过期的Keys中，删除一段时间内使用次数最少使用的</li>
<li>volatile-ttl:从已设置过期时间的数据集中挑选最近将要过期的数据淘汰</li>
<li>volatile-random:从已设置过期时间的数据集中随机选择数据淘汰</li>
<li>allkeys-lru:从数据集中挑选最近最少使用的数据淘汰</li>
<li>allkeys-lfu:从所有Keys中，删除一段时间内使用次数最少使用的</li>
<li>allkeys-random:从数据集中随机选择数据淘汰</li>
<li>no-enviction (驱逐):禁止驱逐数据(不采用任何淘汰策略。默认即为此配置),针对写<br>操作，返回错误信息</li>
</ul>
<blockquote>
<p>建议:了解了Redis的淘汰策略之后,在平时使用时应尽量主动设置/更新key的expire时间，<br>主动剔除不活跃的旧数据,有助于提升查询性能</p>
</blockquote>
<h1 id="Reids-持久化"><a href="#Reids-持久化" class="headerlink" title="Reids 持久化"></a>Reids 持久化</h1><h2 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h2><p>数据存放于:<br>内存:高效、断电(关机)内存数据会丢失<br>硬盘:读写速度慢于内存，断电数侧不会丢失</p>
<h2 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h2><p><a href="/2020/03/14/Redis%E8%BF%9B%E9%98%B6/dump.rdb.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2020/03/14/Redis%E8%BF%9B%E9%98%B6/dump.rdb.png" class="lazyload"></a></p>
<p>RDB: 是redis的默认持久化机制。<br>RDB相当于照快照，保存的是一种状态。<br>几十G数据 一》几KB快照<br>快照是默认的持久化方式。这种方式是就是将内存中数据以快照的方式写入到二进制文件中,默认的文件名为dump. rdb.</p>
<p><strong>优点:</strong><br>快照保存数据极快，还原数据极快<br>适用于灾难备份</p>
<p><strong>缺点</strong>：小内存机器不适合使用。RDB机制符合要求就会使用</p>
<p><strong>快照条件</strong>：</p>
<p><a href="/2020/03/14/Redis%E8%BF%9B%E9%98%B6/%E5%BF%AB%E7%85%A7%E6%9D%A1%E4%BB%B6.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2020/03/14/Redis%E8%BF%9B%E9%98%B6/%E5%BF%AB%E7%85%A7%E6%9D%A1%E4%BB%B6.png" class="lazyload"></a></p>
<h2 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h2><blockquote>
<p>由于快照方式是在一定间隔时间做一次的， 所以如果redis意外down掉的话,就会丢失最<br>后一次快照后的所有修改。如果应用要求不能丢失任何修改的话，可以采用aof 持久化方式。</p>
</blockquote>
<blockquote>
<p>Append-only flie:aof 比快照方式有更好的持久化性，是由于在使用aof持久化方式时,redis会将每一个收到的写命令都通过 write 函數追加到文件中(默认是appendonly.aof). 当redis重启时会通过重新执行文件中保存的写命令来在内存中重建整个数据库的内容。</p>
</blockquote>
<p><strong>有三种方式如下（默认是：每秒 fsync 一次）</strong></p>
<ul>
<li>appendonly yes //启用aof 持久化方式</li>
<li>#appendfsync always //收到写命令就立即写入磁盘，最慢，但是保证完全的持久化</li>
<li>appendfsyne everysec //每秒钟写入磁盘一次，在性能和持久化方面做了很好的折中</li>
<li>#appendfsync no //完全依赖os, 性能最好,持久化没保证</li>
</ul>
<p><strong>产生的问题</strong></p>
<p>aof 的方式也同时带来了另一个问题。持久化文件会变的越来越大。例如我们调用incr test<br>命令100次，文件中必须保存全部的100 条 命令，其实有99 条都是多余的。</p>
<h1 id="Redis缓存与数据库一致性"><a href="#Redis缓存与数据库一致性" class="headerlink" title="Redis缓存与数据库一致性"></a>Redis缓存与数据库一致性</h1><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="一、实时同步"><a href="#一、实时同步" class="headerlink" title="一、实时同步"></a>一、实时同步</h3><blockquote>
<p>对强一致要求比较高的，应采用实时同步方案，即查询缓存查询不到再从DB查询，保存到缓存; 更新缓存时，先更新数据库，再将缓存的设置过期(建议不要去更新缓存内容，直接设置缓存过期)。<br>@Cacheable: 查询时使用,注意Long类型需转换为Sting类型,否则会抛异常<br>@CachePut: 更新时使用，使用此注解, -一定会从 DB 上查询数据<br>@CacheEvict: 删除时使用;<br>@Caching: 组合用法</p>
</blockquote>
<h3 id="二、异步队列"><a href="#二、异步队列" class="headerlink" title="二、异步队列"></a>二、异步队列</h3><blockquote>
<p>对于并发程度较高的，可采用异步队列的方式同步，可采用kafka等消息中间件处理消息生产和消费。</p>
</blockquote>
<p><a href="/2020/03/14/Redis%E8%BF%9B%E9%98%B6/%E5%BC%82%E6%AD%A5%E9%98%9F%E5%88%97.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2020/03/14/Redis%E8%BF%9B%E9%98%B6/%E5%BC%82%E6%AD%A5%E9%98%9F%E5%88%97.png" class="lazyload"></a></p>
<h3 id="三、使用阿里的同步工具-canal"><a href="#三、使用阿里的同步工具-canal" class="headerlink" title="三、使用阿里的同步工具 canal"></a>三、使用阿里的同步工具 canal</h3><blockquote>
<p>canal 实现方式是模拟mysql slave和master的同步机制，监控DB bitlog的日志更新来触发缓存的更新，此种方法可以解放程序员双手，减少工作量，但在使用时有些局限性。</p>
</blockquote>
<p><strong>MySQL主从复制实现</strong></p>
<p><a href="/2020/03/14/Redis%E8%BF%9B%E9%98%B6/MySQL%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%AE%9E%E7%8E%B0.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2020/03/14/Redis%E8%BF%9B%E9%98%B6/MySQL%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%AE%9E%E7%8E%B0.png" class="lazyload"></a></p>
<ol>
<li>master将改变记录到二进制日志(binary log)中(这些记录叫做二进制日志事件，<br>binary log events ,可以通过show binlog events进行查看) </li>
<li>slave 将master的binary log events拷贝到它的中继日志(relay log);</li>
<li>slave 重做中继日志中的事件，将改变反映它自己的数据。</li>
</ol>
<p><strong>canal的工作原理：</strong></p>
<p><a href="/2020/03/14/Redis%E8%BF%9B%E9%98%B6/canal%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2020/03/14/Redis%E8%BF%9B%E9%98%B6/canal%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.png" class="lazyload"></a></p>
<ol>
<li>canal 模拟mysql slave 的交互协议.伪装自己为mysql slave 向mysql master发送dump协议</li>
<li>mysql master收到dump请求，开始推送binary log给 slave(也就是canal)</li>
<li>canal解析 binary log对象(原始为byte 流)</li>
</ol>
<h3 id="四、采用UDF-自定义函数的方式"><a href="#四、采用UDF-自定义函数的方式" class="headerlink" title="四、采用UDF 自定义函数的方式"></a>四、采用UDF 自定义函数的方式</h3><p>面对mysql的API进行编程，利用触发器进行缓存同步，但UDF主要是c/c++语言实现，学习成本高，</p>
<h1 id="Redis-主从复制"><a href="#Redis-主从复制" class="headerlink" title="Redis 主从复制"></a>Redis 主从复制</h1><h2 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p>应用场景：电子商务网站上的商品，一般都是一次上传，无数次浏览的，说专业点就是“多读少些”。</p>
<p><strong>主从复制：</strong></p>
<p>一个Redis服务可以有多个该服务的复制品，这个Redis服务称为Master，其它复制为Slaves</p>
</blockquote>
<p><a href="/2020/03/14/Redis%E8%BF%9B%E9%98%B6/%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2020/03/14/Redis%E8%BF%9B%E9%98%B6/%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6.png" class="lazyload"></a></p>
<blockquote>
<p>如图中所示，我们将一台Redis 服务器作主库(Master）,其他三台作为从库(Slave)，主库只负责写数据，每次有数据更新都将更新的数据同步到它所有的从库，而从库只负责读数据。这样一来，就有了两个好处:<br>1、读写分离，不仅可以提高服务器的负载能力,并且可以根据读请求的规模自由增加或者减少从库的数量。<br>2、数据被复制成了了好几份，就算有一台机器出现故障，也可以使用其他机器的数据快速恢复。<br>需要注意的是: 在Redis主从模式中，一台主库可以拥有多个从库，但是一个从<br>库只能隶属于一个主库。</p>
</blockquote>
<h2 id="Redis主从复制配置"><a href="#Redis主从复制配置" class="headerlink" title="Redis主从复制配置"></a>Redis主从复制配置</h2><p><a href="https://www.cnblogs.com/web424/p/6908647.html" target="_blank" rel="noopener">https://www.cnblogs.com/web424/p/6908647.html</a></p>
<h1 id="Redis-Cluster-集群"><a href="#Redis-Cluster-集群" class="headerlink" title="Redis Cluster 集群"></a>Redis Cluster 集群</h1><h2 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p>为什么使用redis-cluster?<br>为了在大流量访问下提供稳定的业务，集群化是存储的必然形态<br>未来的发展趋势肯定是云计算和大数据的紧密结合<br>只有分布式架构能满足要求</p>
</blockquote>
<p><a href="/2020/03/14/Redis%E8%BF%9B%E9%98%B6/Redis%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%E6%96%B9%E6%A1%88.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2020/03/14/Redis%E8%BF%9B%E9%98%B6/Redis%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%E6%96%B9%E6%A1%88.png" class="lazyload"></a></p>
<blockquote>
<p>Redis集群搭建的方式有多种，但从redis 3. 0之后版本支持redis-cluster集群，至少需要3(Master) +3 (Slave)才能建立集群。Redis-Cluster采用无中心结构，每个节点保存数据和整个集群状态,每个节点都和其他所有节点连接。其redis-cluster架构图如上:</p>
</blockquote>
<h2 id="Redis-Cluster-集群特点"><a href="#Redis-Cluster-集群特点" class="headerlink" title="Redis Cluster 集群特点"></a>Redis Cluster 集群特点</h2><blockquote>
<ol>
<li>所有的redis节点彼此互联(PING-PONG机制)，内部使用二进制协议优化传输速度和带宽。</li>
<li>节点的fail是通过集群中超过半数的节点检测失效时才生效。</li>
<li>客户端与redis节点直连，不需要中间proxy层客户端不需要连接集群所有节点,连接集群中任何一个可用节点即可，</li>
<li>redis-cluster把所有的物理节点映射到[0-16383] slot上 (不一定是平均分配) cluster负责维护</li>
<li>Redis集群预分好 <strong>16384</strong> 个哈希槽，当需要在Redis 集群中放置一个 key-value时，redis 先对key 使用 <strong>crc16</strong> 算法算出-一个结果，然后把结果对 16384 求余数， 这样每个key 都会对应一个编号在0-16383 之间的哈希槽，redis 会根据节点数量大致均等的将哈希槽映射到不同的节点</li>
</ol>
</blockquote>
<h2 id="Redis-Cluster-容错"><a href="#Redis-Cluster-容错" class="headerlink" title="Redis Cluster 容错"></a>Redis Cluster 容错</h2><blockquote>
<p>容错性： 是指软件检测应用程序所运行的软件或硬件中发生的错误并从错误中恢复的能力，通常可以从系统的可靠性、可用性、可测性等几个方面来衡量。</p>
</blockquote>
<p><a href="/2020/03/14/Redis%E8%BF%9B%E9%98%B6/Redis-cluster%E5%AE%B9%E9%94%99.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2020/03/14/Redis%E8%BF%9B%E9%98%B6/Redis-cluster%E5%AE%B9%E9%94%99.png" class="lazyload"></a></p>
<h2 id="Redis-Cluster-节点分配"><a href="#Redis-Cluster-节点分配" class="headerlink" title="Redis-Cluster 节点分配"></a>Redis-Cluster 节点分配</h2><blockquote>
<p>(官方推荐) 三个主节点分别是: A, B, C 三个节点，它们可以是一台机器上的三个端口，也可以是三台不同的服务器。那么，采用哈希槽(hash slot)的方式来分配16384个slot的话，它们三个节点分别承担的slot区间是<br>节点A覆盖9- 5460;<br>节点B覆盖5461 - 10922;<br>节点C覆盖10923 - 16383<br>新增一个主节点:<br>新增一个节点D，redis cluster的这种做法是从各个节点的前面各拿取一部分slot到D上<br>节点A覆盖1365 - 5460<br>节点B覆盖6827 - 10922<br>节点C覆盖12288 -16383<br>节点D覆盖0 - 1364, 5461-6826 ,10923 - 12287</p>
</blockquote>
<h2 id="Redus-Cluster-集群搭建"><a href="#Redus-Cluster-集群搭建" class="headerlink" title="Redus Cluster 集群搭建"></a>Redus Cluster 集群搭建</h2><h3 id="简介-5"><a href="#简介-5" class="headerlink" title="简介"></a>简介</h3><blockquote>
<p>集群中至少应该有奇数个节点，所以搭建集群最少需要3台主机。同时每个节点至少有一个备份节点，所以下面最少需要创建使用6台机器，才能完成Redis Cluster集群(主节点、备份节点由redis-cluster集群确定)</p>
<p>真集群：准备 至少 6 台服务器</p>
<p>例： 192.168.1.1： 6379</p>
<p>​         192.168.1.2： 6379</p>
<p>​         192.168.1.3： 6379 .。。。。。</p>
<p>假集群： 在一台服务器上存在 6 个 redis 服务</p>
<p>例：192.168.1.1：6379 6380 6381 6382 .。。。。。</p>
</blockquote>
<h3 id="搭建流程"><a href="#搭建流程" class="headerlink" title="搭建流程"></a>搭建流程</h3><p>文献<a href="https://www.redis.com.cn/topics/cluster-tutorial" target="_blank" rel="noopener">https://www.redis.com.cn/topics/cluster-tutorial</a></p>
<h4 id="创建节点安装目录-redis-cluster"><a href="#创建节点安装目录-redis-cluster" class="headerlink" title="创建节点安装目录 redis_cluster"></a>创建节点安装目录 <strong>redis_cluster</strong></h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir &#x2F;usr&#x2F;local&#x2F;redis_cluster</span><br></pre></td></tr></table></figure></div>

<p>在 redis_cluster 目录下，创建 7001 到 7006 文件夹</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir 7001 ......</span><br></pre></td></tr></table></figure></div>

<p>将redis-conf 分别拷贝到 这些文件夹下</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp redis.conf &#x2F;usr&#x2F;local&#x2F;redis_cluster&#x2F;7001</span><br></pre></td></tr></table></figure></div>

<p>分别修改配置文件如下内容：</p>
<p>同时protected-mode是为了禁止公网访问redis cache,加强redis安全的。<br>它启用的条件，有两个:</p>
<p>1、没有 bind IP</p>
<p>2、没有设置访问密码</p>
<p>由于Linux上的redis处于安全保护模式这就让你无法从虚拟机外部去轻松建立连接。<br>如果外部访问: redis.conf中设置保护模式为 <strong>protected-mode no</strong></p>
<h4 id="修改7001到7006下的-redis-conf-文件"><a href="#修改7001到7006下的-redis-conf-文件" class="headerlink" title="修改7001到7006下的 redis.conf 文件"></a>修改7001到7006下的 redis.conf 文件</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#关闭保护模式用于公网访问</span><br><span class="line">protected-mode no</span><br><span class="line">port 7000</span><br><span class="line"></span><br><span class="line">#开启集群模式</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes-7000.conf</span><br><span class="line">cluster-node-timeout 5000</span><br><span class="line"></span><br><span class="line">#后台启动</span><br><span class="line">daemonize yes</span><br><span class="line">pidfile &#x2F;var&#x2F;run&#x2F;redis_7000.pid &#x2F;&#x2F;可以不写</span><br><span class="line">logfile &quot;7000.log&quot;  &#x2F;&#x2F;可以不写</span><br><span class="line"></span><br><span class="line">#dir &#x2F;redis&#x2F;data</span><br><span class="line">#此处绑定ip可以是阿里内网ip和本地ip也可以直接注释掉该项</span><br><span class="line">bind 127.0.0.1</span><br><span class="line"></span><br><span class="line">#用于连接主节点密码</span><br><span class="line">masterauth yizhiduxiu</span><br><span class="line"></span><br><span class="line">#设置redis密码各个节点请保持密码一致</span><br><span class="line">requirepass yizhiduxiu</span><br></pre></td></tr></table></figure></div>

<h4 id="依次启动各个节点"><a href="#依次启动各个节点" class="headerlink" title="依次启动各个节点"></a>依次启动各个节点</h4><blockquote>
<p>将安装的redis 目录下的 src 复制到 redis_cluster下，方便启动服务器</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd redis-5.0.7</span><br><span class="line">cp -r .&#x2F;src&#x2F; &#x2F;usr&#x2F;local&#x2F;redis_cluster&#x2F;  &#x2F;&#x2F;-r复制src目录下级联的所有文件</span><br></pre></td></tr></table></figure></div>
</blockquote>
<p>启动各个redis节点</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;local&#x2F;redis_cluster</span><br><span class="line">.&#x2F;src&#x2F;redis-server .&#x2F;7000&#x2F;redis.conf</span><br></pre></td></tr></table></figure></div>

<p><a href="/2020/03/14/Redis%E8%BF%9B%E9%98%B6/%E9%9B%86%E7%BE%A4%E8%8A%82%E7%82%B9%E5%90%AF%E5%8A%A8%E6%88%90%E5%8A%9F.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2020/03/14/Redis%E8%BF%9B%E9%98%B6/%E9%9B%86%E7%BE%A4%E8%8A%82%E7%82%B9%E5%90%AF%E5%8A%A8%E6%88%90%E5%8A%9F.png" class="lazyload"></a></p>
<p>启动成功</p>
<h3 id="创建集群"><a href="#创建集群" class="headerlink" title="创建集群"></a>创建集群</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;local&#x2F;redis_cluster</span><br><span class="line">.&#x2F;src&#x2F;redis-cli --cluster create 127.0.0.1:7001 127.0.0.1:7002 127.0.0.1:7003 127.0.0.1:7004 127.0.0.1:7005 127.0.0.1:7006 --cluster-replicas 1 -a yizhiduxiu</span><br><span class="line"></span><br><span class="line"># --cluster-replicas 1  表示主从配置比，1表示的是1:1，前三个是主，后三个是从</span><br><span class="line"># 若配置文件中设置的密码，则还需要加上-a passwod</span><br></pre></td></tr></table></figure></div>

<p>创建过程中可能要求输入 yes 输入yes 就完事了</p>
<p><a href="/2020/03/14/Redis%E8%BF%9B%E9%98%B6/%E9%9B%86%E7%BE%A4%E5%88%9B%E5%BB%BA%E6%88%90%E5%8A%9F.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2020/03/14/Redis%E8%BF%9B%E9%98%B6/%E9%9B%86%E7%BE%A4%E5%88%9B%E5%BB%BA%E6%88%90%E5%8A%9F.png" class="lazyload"></a></p>
<h3 id="Redis-Cluster-集群验证"><a href="#Redis-Cluster-集群验证" class="headerlink" title="Redis Cluster 集群验证"></a>Redis Cluster 集群验证</h3><blockquote>
<p>在某台机器上(或)连接集群的7001端口的节点:</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis-cli -h 127.0.0.1 -c -p 7001 -a yizhiduxiu  &#x2F;&#x2F; -c 可连接到集群</span><br></pre></td></tr></table></figure></div>

<p>加参数 -C 可连接到集群，因为上面redis.conf 将bind改为了ip地址，所以-h参数不可以省略。<br>(在该节点下添加对应key数据)<br>启动另一个集群中的客户节点:例如: 7005 .<br>进行读取命令。</p>
<p>redis cluster在设计的时候，就考虑到了去中心化，去中间件，也就是说，集群中的每个节点都是平等的关系，都是对等的，每个节点都保存各自的数据和整个集群的状态。每个节点都和其他所有节点连接，而且这些连接保持活跃，这样就保证了我们只需要连接集群中的任意一个节 点，就可以获取到其他节点的数据</p>
</blockquote>
<h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><p>info replication 通过Cluster Nodes命令和Cluster Info命令来看看集群效果</p>
<p><a href="/2020/03/14/Redis%E8%BF%9B%E9%98%B6/%E4%BD%BF%E7%94%A8inforeplication.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2020/03/14/Redis%E8%BF%9B%E9%98%B6/%E4%BD%BF%E7%94%A8inforeplication.png" class="lazyload"></a></p>
<h3 id="测试集群数据"><a href="#测试集群数据" class="headerlink" title="测试集群数据"></a>测试集群数据</h3><h4 id="输入命令-cluster-nodes"><a href="#输入命令-cluster-nodes" class="headerlink" title="输入命令 cluster nodes"></a>输入命令 cluster nodes</h4><p><a href="/2020/03/14/Redis%E8%BF%9B%E9%98%B6/%E9%9B%86%E7%BE%A4id.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2020/03/14/Redis%E8%BF%9B%E9%98%B6/%E9%9B%86%E7%BE%A4id.png" class="lazyload"></a></p>
<p>每个Redis的节点都有一个ID值，此ID将被此特定redls实例永久使用，以便实例在集群上下文中具有唯一的名称。每个节点都会记住 使用此ID的每个其他节点，而不是通过IP或端口。IP地址和端口可能会发生变化，但唯一的节点标识符在节点的整个生命周期内都不会改变。我们简单地称这个标识符为节点ID。</p>
<h3 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h3><p><a href="/2020/03/14/Redis%E8%BF%9B%E9%98%B6/%E6%B5%8B%E8%AF%95%E6%95%B0%E6%8D%AE.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2020/03/14/Redis%E8%BF%9B%E9%98%B6/%E6%B5%8B%E8%AF%95%E6%95%B0%E6%8D%AE.png" class="lazyload"></a></p>
<h3 id="Redis-Cluster-集群-启动关闭"><a href="#Redis-Cluster-集群-启动关闭" class="headerlink" title="Redis Cluster 集群 启动关闭"></a>Redis Cluster 集群 启动关闭</h3><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><p><strong>/usr/local/redis_cluster 目录下编写脚本文件：vim start.sh</strong></p>
<p>内容如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;usr&#x2F;local&#x2F;redis_cluster&#x2F;src&#x2F;redis-server .&#x2F;7001&#x2F;redis.conf</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;redis_cluster&#x2F;src&#x2F;redis-server .&#x2F;7002&#x2F;redis.conf</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;redis_cluster&#x2F;src&#x2F;redis-server .&#x2F;7003&#x2F;redis.conf</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;redis_cluster&#x2F;src&#x2F;redis-server .&#x2F;7004&#x2F;redis.conf</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;redis_cluster&#x2F;src&#x2F;redis-server .&#x2F;7005&#x2F;redis.conf</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;redis_cluster&#x2F;src&#x2F;redis-server .&#x2F;7006&#x2F;redis.conf</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod u+x start.sh  &#x2F;&#x2F;然后执行将start.sh 变成可执行文件</span><br><span class="line">.&#x2F;start.sh  &#x2F;&#x2F;在当前目录下启动</span><br></pre></td></tr></table></figure></div>



<h4 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h4><p><strong>/usr/local/redis_cluster 目录下编写脚本文件：vim shutdown.sh</strong></p>
<p>内容如下：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;usr&#x2F;local&#x2F;redis_cluster&#x2F;src&#x2F;redis-cli -c -h 127.0.0.1 -p 7001 -a yizhiduxiu shutdown</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;redis_cluster&#x2F;src&#x2F;redis-cli -c -h 127.0.0.1 -p 7002 -a yizhiduxiu  shutdown</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;redis_cluster&#x2F;src&#x2F;redis-cli -c -h 127.0.0.1 -p 7003 -a yizhiduxiu  shutdown</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;redis_cluster&#x2F;src&#x2F;redis-cli -c -h 127.0.0.1 -p 7004 -a yizhiduxiu  shutdown</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;redis_cluster&#x2F;src&#x2F;redis-cli -c -h 127.0.0.1 -p 7005 -a yizhiduxiu  shutdown</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;redis_cluster&#x2F;src&#x2F;redis-cli -c -h 127.0.0.1 -p 7006 -a yizhiduxiu  shutdown</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod u+x shutdown.sh  &#x2F;&#x2F;然后执行将shutdown.sh 变成可执行文件</span><br><span class="line">.&#x2F;shutdown.sh  &#x2F;&#x2F;在当前目录下启动</span><br><span class="line">查看：ps aux | grep redis</span><br><span class="line">官方：&#x2F;usr&#x2F;local&#x2F;redis_cluster&#x2F;redis-cli -a yizhiduxiu -c -h 127.0.0.1 -p 7001</span><br><span class="line">提示：-a访问服务端密码， -c 表示集群模式 -h指定ip地址 -p指定端口号</span><br></pre></td></tr></table></figure></div>



<h3 id="开启端口权限"><a href="#开启端口权限" class="headerlink" title="开启端口权限"></a>开启端口权限</h3><p>如果想要通过外部访问 Redis 集群，那么就要开发端口</p>
<p>查看已经开放的端口： </p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --list-ports</span><br></pre></td></tr></table></figure></div>

<p>开启端口：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone&#x3D;public --add-port&#x3D;7001&#x2F;tcp --permanent</span><br></pre></td></tr></table></figure></div>

<p>重启防火墙：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure></div>

<h3 id="Redis-Cluster总结"><a href="#Redis-Cluster总结" class="headerlink" title="Redis Cluster总结"></a>Redis Cluster总结</h3><blockquote>
<p>Redis cluster为了保证数据的高可用性,加入了主从模式,一个主节点对应一个或多个从节点,主节点提供数据存取,从节点则是以主节点拉取数据备份,当这个主节点挂掉后,就会有这个从节点选取一个来充当主节点，从而保证集群不会挂掉。</p>
<p>集群有ABC三个主节点如果这3个节点都没有加入从节点,如果B挂掉了,我们就无法访问整个集群了, A和C的slot也无法访问，</p>
<p>所以我们在集群建立的时候,一定要为每个主节点都添加了从节点比如像这样，集群包含主节点A. B、 C,以及从节点A1、B1. C1, 那么即使B挂掉系统也可以继续正确工作。</p>
<p>B1节点替代了B节点,所以Redis集群将会选择B1节点作为新的主节点,集群将会继续正确地提供服务。当B重新开启后,它就会变成B1的从节点。</p>
<p>不过需要注意,如果节点B和B1同时挂了, Redis集群就无法继续正确地提供服务了。</p>
</blockquote>
]]></content>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux设置固定IP地址</title>
    <url>/2020/03/11/Linux%E8%AE%BE%E7%BD%AE%E5%9B%BA%E5%AE%9AIP%E5%9C%B0%E5%9D%80/</url>
    <content><![CDATA[<h1 id="Linux设置固定IP地址"><a href="#Linux设置固定IP地址" class="headerlink" title="Linux设置固定IP地址"></a>Linux设置固定IP地址</h1><p>我这里使用的系统是 CentOS7</p>
<p>找到网络配置文件</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;&amp;&amp;ls</span><br></pre></td></tr></table></figure></div>

<p>找到 <strong>ifcfg-ens33</strong> 这个文件（系统不同可能文件不同，但是大概都是这个位置）</p>
<p><a href="/2020/03/11/Linux%E8%AE%BE%E7%BD%AE%E5%9B%BA%E5%AE%9AIP%E5%9C%B0%E5%9D%80/ifcfg-ens33.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2020/03/11/Linux%E8%AE%BE%E7%BD%AE%E5%9B%BA%E5%AE%9AIP%E5%9C%B0%E5%9D%80/ifcfg-ens33.png" class="lazyload"></a></p>
<a id="more"></a>

<p>打开 ifcfg-ens33</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">less ifcfg-ens33</span><br></pre></td></tr></table></figure></div>

<p><a href="/2020/03/11/Linux%E8%AE%BE%E7%BD%AE%E5%9B%BA%E5%AE%9AIP%E5%9C%B0%E5%9D%80/less-ifcfg-ens33.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2020/03/11/Linux%E8%AE%BE%E7%BD%AE%E5%9B%BA%E5%AE%9AIP%E5%9C%B0%E5%9D%80/less-ifcfg-ens33.png" class="lazyload"></a></p>
<p>输入</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;&#x2F;进入修改</span><br><span class="line">ESC &#x2F;&#x2F;退出当前指令</span><br><span class="line">:q &#x2F;&#x2F;退出</span><br><span class="line">:w &#x2F;&#x2F;保存</span><br><span class="line">:wq &#x2F;&#x2F;保存并退出</span><br></pre></td></tr></table></figure></div>

<p>主要配置</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BOOTPROTO&#x3D;&quot;static&quot;  &#x2F;&#x2F;设置为静态</span><br><span class="line">IPADDR&#x3D;&quot;&quot;  &#x2F;&#x2F;你要设置的IP地址</span><br><span class="line">NETMASK&#x3D;&quot;&quot; &#x2F;&#x2F;IPv4 子网掩码</span><br><span class="line">GATEWAY&#x3D;&quot;&quot; &#x2F;&#x2F;IPv4 默认网关</span><br><span class="line">DNS1&#x3D;&quot;8.8.8.8&quot;  &#x2F;&#x2F;可以不配置</span><br></pre></td></tr></table></figure></div>

<p>上述主要配置需要根据本机网络信息来配置</p>
<p>进入网络连接</p>
<p><a href="/2020/03/11/Linux%E8%AE%BE%E7%BD%AE%E5%9B%BA%E5%AE%9AIP%E5%9C%B0%E5%9D%80/%E6%9C%AC%E6%9C%BA%E7%BD%91%E7%BB%9C.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2020/03/11/Linux%E8%AE%BE%E7%BD%AE%E5%9B%BA%E5%AE%9AIP%E5%9C%B0%E5%9D%80/%E6%9C%AC%E6%9C%BA%E7%BD%91%E7%BB%9C.png" class="lazyload"></a></p>
<p>右键当前连接的网络，点击<strong>状态</strong></p>
<p><a href="/2020/03/11/Linux%E8%AE%BE%E7%BD%AE%E5%9B%BA%E5%AE%9AIP%E5%9C%B0%E5%9D%80/%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2020/03/11/Linux%E8%AE%BE%E7%BD%AE%E5%9B%BA%E5%AE%9AIP%E5%9C%B0%E5%9D%80/%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF.png" class="lazyload"></a></p>
<p>点击详细信息</p>
<p><a href="/2020/03/11/Linux%E8%AE%BE%E7%BD%AE%E5%9B%BA%E5%AE%9AIP%E5%9C%B0%E5%9D%80/%E7%BD%91%E7%BB%9C%E8%AF%A6%E7%BB%86%E4%BF%A1%E6%81%AF.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2020/03/11/Linux%E8%AE%BE%E7%BD%AE%E5%9B%BA%E5%AE%9AIP%E5%9C%B0%E5%9D%80/%E7%BD%91%E7%BB%9C%E8%AF%A6%E7%BB%86%E4%BF%A1%E6%81%AF.png" class="lazyload"></a></p>
<p>根据这个信息配置</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BOOTPROTO&#x3D;&quot;static&quot;  &#x2F;&#x2F;设置为静态</span><br><span class="line">IPADDR&#x3D;&quot;&quot;  &#x2F;&#x2F;你要设置的IP地址  对应IPv4地址 前三组数字要相同，后面的数字自己设置，设置前先ping一下看ping不ping的通，不要使用ping的通的IP</span><br><span class="line">NETMASK&#x3D;&quot;&quot; &#x2F;&#x2F;IPv4 子网掩码 对应 IPv4 子网掩码要一模一样</span><br><span class="line">GATEWAY&#x3D;&quot;&quot; &#x2F;&#x2F;IPv4 默认网关 对应 IPv4 默认网关要一模一样</span><br><span class="line">DNS1&#x3D;&quot;8.8.8.8&quot;  &#x2F;&#x2F;可以不配置</span><br></pre></td></tr></table></figure></div>

<p>修改完成输入命令重启网络服务</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure></div>

<p>测试 </p>
<p>ping <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux命令</title>
    <url>/2020/03/06/Linux%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">查看Redis启动的端口</span><br><span class="line">ps -ef | grep -i redis</span><br><span class="line"></span><br><span class="line">查看进程树</span><br><span class="line">pstree</span><br><span class="line"></span><br><span class="line">查看某端口否开启</span><br><span class="line">netstat -tunlp | grep 6379</span><br><span class="line"></span><br><span class="line">查看 Redis 安装路径</span><br><span class="line">whereis redis</span><br><span class="line"></span><br><span class="line">查看 Redis 客户端安装路径(我好像看不懂这个路径)</span><br><span class="line">whereis redis-cli</span><br></pre></td></tr></table></figure></div>

<a id="more"></a>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">查看 Redis 服务端路径</span><br><span class="line">whereis redis-server</span><br><span class="line"></span><br><span class="line">启动服务端</span><br><span class="line">bin&#x2F;redis-server redis.conf</span><br><span class="line"></span><br><span class="line">启动客户端</span><br><span class="line">bin&#x2F;redis-cli -a 密码</span><br><span class="line"></span><br><span class="line">关闭客户端</span><br><span class="line">shutdown</span><br><span class="line"></span><br><span class="line">关闭（杀进程）</span><br><span class="line">pkill redis-server</span><br><span class="line"></span><br><span class="line">清空当前的数据库</span><br><span class="line">flushdb</span><br><span class="line"></span><br><span class="line">选择数据库（一共16个）</span><br><span class="line">select index</span><br><span class="line"></span><br><span class="line">杀掉指定的连接</span><br><span class="line">kill PID</span><br><span class="line"></span><br><span class="line">打开指定文件</span><br><span class="line">less Redis.conf</span><br><span class="line">	:q 退出</span><br><span class="line">	:wq 保存并退出</span><br><span class="line">	v i 修改文件</span><br><span class="line">	ESC 取消当前操作</span><br><span class="line">	u 撤回</span><br><span class="line">	&#x2F;关键字  查询关键字</span><br><span class="line">	</span><br><span class="line">退出客户端连接</span><br><span class="line">quit</span><br></pre></td></tr></table></figure></div>

<h1 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">重启防火墙</span><br><span class="line">firewall-cmd --reload</span><br><span class="line"></span><br><span class="line">开启端口</span><br><span class="line">firewall-cmd --zone&#x3D;public --add-port&#x3D;7001&#x2F;tcp --permanent</span><br><span class="line"></span><br><span class="line">查看已开放的端口</span><br><span class="line">firewall-cmd --list-ports</span><br></pre></td></tr></table></figure></div>

]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot整合Redis</title>
    <url>/2020/03/05/SpringBoot%E6%95%B4%E5%90%88Redis/</url>
    <content><![CDATA[<hr>

<h1 id="Java连接Redis"><a href="#Java连接Redis" class="headerlink" title="Java连接Redis"></a>Java连接Redis</h1><blockquote>
<p>在官方网站列一些Java客户端访问，有: Jedis/Redisson/ Jredis/ JDBC-Redis等，其中官方推荐使用Jedis和Redisson。常用Jedis.</p>
<p>开始在Java中使用Redis 前，我们需要确保已经安装了redis 服务及Javaredis驱动，且你的机器上能正常使用Java。 Java 的安装配置可以参考我们的Java 开发环境配置接下来让我们安装Java redis驱动</p>
</blockquote>
<a id="more"></a>

<p>导入依赖</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>测试：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Java端 通过Jedis 操作Redis服务器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRedis</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String host = <span class="string">"192.168.43.47"</span>;</span><br><span class="line">        Integer port = <span class="number">6379</span>;</span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(host,port);</span><br><span class="line">        jedis.auth(<span class="string">"yizhiduxiu"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(jedis.ping());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>运行测试，有可能会报错，不过是正常的，</p>
<blockquote>
<p>使用命令查看默认端口号 6379 是否打开</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --list-ports</span><br></pre></td></tr></table></figure></div>
<p>没有打开的话，使用下面的命令开启端口</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone&#x3D;public --add-port&#x3D;6379&#x2F;tcp --permanent</span><br></pre></td></tr></table></figure></div>
<p>重启防火墙</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure></div>

<p>上述步骤输出 success 表示成功</p>
</blockquote>
<h1 id="RedisTemplate"><a href="#RedisTemplate" class="headerlink" title="RedisTemplate"></a>RedisTemplate</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p>Spring data提供了RedisTemplate 模版<br>它封装了redis 连接池管理的逻辑，业务代码无须关心获取，释放连接逻辑;<br>spring redis同时支持了Jedis, Jredis, rjc客户端操作;<br>在RedisTemplate中提供了几个常用的接口方法的使用，分别是</p>
</blockquote>
<h2 id="配置目录"><a href="#配置目录" class="headerlink" title="配置目录"></a>配置目录</h2><p><a href="/2020/03/05/SpringBoot%E6%95%B4%E5%90%88Redis/RedisTemplate%E9%85%8D%E7%BD%AE%E7%9B%AE%E5%BD%95.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2020/03/05/SpringBoot%E6%95%B4%E5%90%88Redis/RedisTemplate%E9%85%8D%E7%BD%AE%E7%9B%AE%E5%BD%95.png" class="lazyload"></a></p>
<h3 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 用来做序列化 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.38<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="redis-properties"><a href="#redis-properties" class="headerlink" title="redis.properties"></a>redis.properties</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">properties</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Matser的ip地址</span></span><br><span class="line"><span class="meta">redis.hostName</span>=<span class="string">192.168.43.47</span></span><br><span class="line"><span class="comment">#端口号</span></span><br><span class="line"><span class="meta">redis.port</span>=<span class="string">6379</span></span><br><span class="line"><span class="comment">#如果有密码</span></span><br><span class="line"><span class="meta">redis.password</span>=<span class="string">yizhiduxiu</span></span><br><span class="line"><span class="comment">#客户端超时时间单位是毫秒 默认是2000</span></span><br><span class="line"><span class="meta">redis.timeout</span>=<span class="string">10000</span></span><br><span class="line"><span class="comment">#最大空闲数</span></span><br><span class="line"><span class="meta">redis.maxIdle</span>=<span class="string">300  </span></span><br><span class="line"><span class="comment">#连接池的最大数据库连接数。设为0表示无限制,如果是jedis 2.4以后用redis.maxTotal</span></span><br><span class="line"><span class="comment">#redis.maxActive=600</span></span><br><span class="line"><span class="comment">#控制一个pool可分配多少个jedis实例,用来替换上面的redis.maxActive,如果是jedis 2.4以后用该属性</span></span><br><span class="line"><span class="meta">redis.maxTotal</span>=<span class="string">1000  </span></span><br><span class="line"><span class="comment">#最大建立连接等待时间。如果超过此时间将接到异常。设为-1表示无限制。</span></span><br><span class="line"><span class="meta">redis.maxWaitMillis</span>=<span class="string">1000  </span></span><br><span class="line"><span class="comment">#连接的最小空闲时间 默认1800000毫秒(30分钟)</span></span><br><span class="line"><span class="meta">redis.minEvictableIdleTimeMillis</span>=<span class="string">300000  </span></span><br><span class="line"><span class="comment">#每次释放连接的最大数目,默认3</span></span><br><span class="line"><span class="meta">redis.numTestsPerEvictionRun</span>=<span class="string">1024  </span></span><br><span class="line"><span class="comment">#逐出扫描的时间间隔(毫秒) 如果为负数,则不运行逐出线程, 默认-1</span></span><br><span class="line"><span class="meta">redis.timeBetweenEvictionRunsMillis</span>=<span class="string">30000  </span></span><br><span class="line"><span class="comment">#是否在从池中取出连接前进行检验,如果检验失败,则从池中去除连接并尝试取出另一个</span></span><br><span class="line"><span class="meta">redis.testOnBorrow</span>=<span class="string">true  </span></span><br><span class="line"><span class="comment">#在空闲时检查有效性, 默认false</span></span><br><span class="line"><span class="meta">redis.testWhileIdle</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure></div>

<h3 id="BaseController"><a href="#BaseController" class="headerlink" title="BaseController"></a>BaseController</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.sp.base.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.sp.base.utils.StateParameter;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.ModelMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 一支毒秀</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">final</span> String success = StateParameter.SUCCESS;</span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">final</span> String fail = StateParameter.FAULT;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> ModelMap <span class="title">getModelMap</span><span class="params">(String status, Object data, String msg)</span></span>&#123;</span><br><span class="line">		ModelMap modelMap=<span class="keyword">new</span> ModelMap();</span><br><span class="line">		modelMap.put(<span class="string">"status"</span>, status);</span><br><span class="line">		modelMap.put(<span class="string">"data"</span>, data);</span><br><span class="line">		modelMap.put(<span class="string">"msg"</span>, msg);</span><br><span class="line">		<span class="keyword">return</span> modelMap;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getUuid</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="comment">//获取UUID并转化为String对象</span></span><br><span class="line">		String uuid = UUID.randomUUID().toString();</span><br><span class="line">		uuid = uuid.replace(<span class="string">"-"</span>, <span class="string">""</span>);</span><br><span class="line">		<span class="keyword">return</span> uuid;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="FastJson2JsonRedisSerializer"><a href="#FastJson2JsonRedisSerializer" class="headerlink" title="FastJson2JsonRedisSerializer"></a>FastJson2JsonRedisSerializer</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.sp.base.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.serializer.SerializerFeature;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.RedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.SerializationException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: FastJson2JsonRedisSerializer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: zhangyingqi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/8/28 16:11</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 自定义序列化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FastJson2JsonRedisSerializer</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">RedisSerializer</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_CHARSET = Charset.forName(<span class="string">"UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Class&lt;T&gt; clazz;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FastJson2JsonRedisSerializer</span><span class="params">(Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.clazz = clazz;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] serialize(T t) <span class="keyword">throws</span> SerializationException &#123;</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> JSON.toJSONString(t, SerializerFeature.WriteClassName).getBytes(DEFAULT_CHARSET);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">deserialize</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> <span class="keyword">throws</span> SerializationException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (bytes == <span class="keyword">null</span> || bytes.length &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String str = <span class="keyword">new</span> String(bytes, DEFAULT_CHARSET);</span><br><span class="line">        <span class="comment">//解决com.alibaba.fastjson.JSONException: autoType is not support,添加白名单</span></span><br><span class="line">        <span class="comment">//ParserConfig.getGlobalInstance().addAccept("cn.sp.base.utils.");</span></span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> (T) JSON.parseObject(str, clazz);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="RedisConstants"><a href="#RedisConstants" class="headerlink" title="RedisConstants"></a>RedisConstants</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.sp.base.utils;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span>: zhangyingqi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 17:50 2018/8/28</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 此类用于区分redis的库</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConstants</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String spilt=<span class="string">":"</span>;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * redis库0 测试</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer datebase0=<span class="number">0</span>;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * redis库1  保存档案树</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer datebase1=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 1.redis库2 保存档案表格</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer datebase2=<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * redis库3 保存档案image url</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer datebase3=<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 1.redis库4 保存手机验证码</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer datebase4=<span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * redis库5 保存身份认证信息</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer datebase5=<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * redis库6 记录身份认证次数</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer datebase6=<span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * redis库7 记录重发次数</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer datebase7=<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * redis库8 记录任务参数</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer datebase8=<span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">RedisConstants</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="RedisTemplate-1"><a href="#RedisTemplate-1" class="headerlink" title="RedisTemplate"></a>RedisTemplate</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.sp.base.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnection;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.jedis.JedisConnection;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: RedisTemplate</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: zhangyingqi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/8/28 16:15</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 重写RedisTemplate,加入选库</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisTemplate</span> <span class="keyword">extends</span> <span class="title">org</span>.<span class="title">springframework</span>.<span class="title">data</span>.<span class="title">redis</span>.<span class="title">core</span>.<span class="title">RedisTemplate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ThreadLocal&lt;Integer&gt; indexdb = <span class="keyword">new</span> ThreadLocal&lt;Integer&gt;()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> Integer <span class="title">initialValue</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> RedisConnection <span class="title">preProcessConnection</span><span class="params">(RedisConnection connection, <span class="keyword">boolean</span> existingConnection)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Integer dbIndex = indexdb.get();</span><br><span class="line">            <span class="comment">//如果设置了dbIndex</span></span><br><span class="line">            <span class="keyword">if</span> (dbIndex != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (connection <span class="keyword">instanceof</span> JedisConnection) &#123;</span><br><span class="line"><span class="comment">//                    if (((JedisConnection) connection).getNativeConnection().getDB().intValue() != dbIndex) &#123;</span></span><br><span class="line">                    <span class="keyword">if</span> (((JedisConnection) connection).getNativeConnection().getDB() != dbIndex) &#123;</span><br><span class="line">                        connection.select(dbIndex);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    connection.select(dbIndex);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                connection.select(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            indexdb.remove();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.preProcessConnection(connection, existingConnection);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="RedisUtil"><a href="#RedisUtil" class="headerlink" title="RedisUtil"></a>RedisUtil</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.sp.base.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Lazy;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.CollectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Lazy</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisUtil</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRedisTemplate</span><span class="params">(RedisTemplate redisTemplate)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//=============================common============================</span></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 指定缓存失效时间</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">expire</span><span class="params">(String key, <span class="keyword">long</span> time)</span></span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">if</span>(time&gt;<span class="number">0</span>)&#123;</span><br><span class="line">				redisTemplate.expire(key, time, TimeUnit.SECONDS);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 根据key 获取过期时间</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> key 键 不能为null</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> 时间(秒) 返回0代表为永久有效</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getExpire</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> redisTemplate.getExpire(key, TimeUnit.SECONDS);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 判断key是否存在</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasKey</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> redisTemplate.hasKey(key);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 删除缓存</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> key 可以传一个值 或多个</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(String... key)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(key!=<span class="keyword">null</span>&amp;&amp;key.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">if</span>(key.length==<span class="number">1</span>)&#123;</span><br><span class="line">				redisTemplate.delete(key[<span class="number">0</span>]);</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				redisTemplate.delete(CollectionUtils.arrayToList(key));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//============================String=============================</span></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 普通缓存获取</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> 值</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(String key, <span class="keyword">int</span> indexdb)</span></span>&#123;</span><br><span class="line">		redisTemplate.indexdb.set(indexdb);</span><br><span class="line">		<span class="keyword">return</span> key==<span class="keyword">null</span>?<span class="keyword">null</span>:redisTemplate.opsForValue().get(key);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 普通缓存放入</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(String key, Object value, <span class="keyword">int</span> indexdb)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			redisTemplate.indexdb.set(indexdb);</span><br><span class="line">			redisTemplate.opsForValue().set(key, value);</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 普通缓存放入并设置时间</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> time 时间(秒) time要大于0 如果time小于等于0 将设置无限期</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> true成功 false 失败</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(String key, Object value, <span class="keyword">long</span> time)</span></span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">if</span>(time&gt;<span class="number">0</span>)&#123;</span><br><span class="line">				redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				redisTemplate.opsForValue().set(key, value);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 递增</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> by 要增加几(大于0)</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">incr</span><span class="params">(String key, <span class="keyword">long</span> delta)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(delta&lt;<span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"递增因子必须大于0"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> redisTemplate.opsForValue().increment(key, delta);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 递减</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> by 要减少几(小于0)</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">decr</span><span class="params">(String key, <span class="keyword">long</span> delta)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(delta&lt;<span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"递减因子必须大于0"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> redisTemplate.opsForValue().increment(key, -delta);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//================================Map=================================</span></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * HashGet</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> key 键 不能为null</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> item 项 不能为null</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> 值</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">hget</span><span class="params">(String key, String item)</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> redisTemplate.opsForHash().get(key, item);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 获取hashKey对应的所有键值</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> 对应的多个键值</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Map&lt;Object, Object&gt; <span class="title">hmget</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> redisTemplate.opsForHash().entries(key);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * HashSet</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> map 对应多个键值</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> true 成功 false 失败</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hmset</span><span class="params">(String key, Map&lt;String, Object&gt; map)</span></span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * HashSet 并设置时间</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> map 对应多个键值</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hmset</span><span class="params">(String key, Map&lt;String, Object&gt; map, <span class="keyword">long</span> time)</span></span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">			<span class="keyword">if</span>(time&gt;<span class="number">0</span>)&#123;</span><br><span class="line">				expire(key, time);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> true 成功 false失败</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hset</span><span class="params">(String key, String item, Object value)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> time 时间(秒)  注意:如果已存在的hash表有时间,这里将会替换原有的时间</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> true 成功 false失败</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hset</span><span class="params">(String key, String item, Object value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">			<span class="keyword">if</span>(time&gt;<span class="number">0</span>)&#123;</span><br><span class="line">				expire(key, time);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 删除hash表中的值</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> key 键 不能为null</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> item 项 可以使多个 不能为null</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hdel</span><span class="params">(String key, Object... item)</span></span>&#123;</span><br><span class="line">		redisTemplate.opsForHash().delete(key,item);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 判断hash表中是否有该项的值</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> key 键 不能为null</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> item 项 不能为null</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hHasKey</span><span class="params">(String key, String item)</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> redisTemplate.opsForHash().hasKey(key, item);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * hash递增 如果不存在,就会创建一个 并把新增后的值返回</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> by 要增加几(大于0)</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">hincr</span><span class="params">(String key, String item, <span class="keyword">double</span> by)</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item, by);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * hash递减</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> by 要减少记(小于0)</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">hdecr</span><span class="params">(String key, String item, <span class="keyword">double</span> by)</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item,-by);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//============================set=============================</span></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 根据key获取Set中的所有值</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">sGet</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> redisTemplate.opsForSet().members(key);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 根据value从一个set中查询,是否存在</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sHasKey</span><span class="params">(String key, Object value)</span></span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> redisTemplate.opsForSet().isMember(key, value);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 将数据放入set缓存</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> 成功个数</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sSet</span><span class="params">(String key, Object...values)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> redisTemplate.opsForSet().add(key, values);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 将set数据放入缓存</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> 成功个数</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sSetAndTime</span><span class="params">(String key, <span class="keyword">long</span> time, Object...values)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Long count = redisTemplate.opsForSet().add(key, values);</span><br><span class="line">			<span class="keyword">if</span>(time&gt;<span class="number">0</span>) expire(key, time);</span><br><span class="line">			<span class="keyword">return</span> count;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 获取set缓存的长度</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sGetSetSize</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> redisTemplate.opsForSet().size(key);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 移除值为value的</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> 移除的个数</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">setRemove</span><span class="params">(String key, Object...values)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Long count = redisTemplate.opsForSet().remove(key, values);</span><br><span class="line">			<span class="keyword">return</span> count;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//===============================list=================================</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 获取list缓存的内容</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> start 开始</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> end 结束  0 到 -1代表所有值</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">lGet</span><span class="params">(String key, <span class="keyword">long</span> start, <span class="keyword">long</span> end)</span></span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> redisTemplate.opsForList().range(key, start, end);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 获取list缓存的长度</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">lGetListSize</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> redisTemplate.opsForList().size(key);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 通过索引 获取list中的值</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> index 索引  index&gt;=0时， 0 表头，1 第二个元素，依次类推；index&lt;0时，-1，表尾，-2倒数第二个元素，依次类推</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">lGetIndex</span><span class="params">(String key, <span class="keyword">long</span> index)</span></span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> redisTemplate.opsForList().index(key, index);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 将list放入缓存</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 将list放入缓存</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, Object value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">			<span class="keyword">if</span> (time &gt; <span class="number">0</span>) expire(key, time);</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 将list放入缓存</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, List&lt;Object&gt; value)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 将list放入缓存</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, List&lt;Object&gt; value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line">			<span class="keyword">if</span> (time &gt; <span class="number">0</span>) expire(key, time);</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 根据索引修改list中的某条数据</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> index 索引</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lUpdateIndex</span><span class="params">(String key, <span class="keyword">long</span> index, Object value)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			redisTemplate.opsForList().set(key, index, value);</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 移除N个值为value</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> count 移除多少个</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> 移除的个数</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">lRemove</span><span class="params">(String key, <span class="keyword">long</span> count, Object value)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Long remove = redisTemplate.opsForList().remove(key, count, value);</span><br><span class="line">			<span class="keyword">return</span> remove;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">/*JedisPool jedisPool = new JedisPool(null,"localhost",6379,100,"123456");</span></span><br><span class="line"><span class="comment">		Jedis jedis = jedisPool.getResource();</span></span><br><span class="line"><span class="comment">		//r.get("", RedisConstants.datebase4);</span></span><br><span class="line"><span class="comment">		jedis.select(RedisConstants.datebase4);</span></span><br><span class="line"><span class="comment">		Set&lt;String&gt; str =  jedis.keys("*");</span></span><br><span class="line"><span class="comment">		for (String string : str) &#123;</span></span><br><span class="line"><span class="comment">			System.out.println(string);</span></span><br><span class="line"><span class="comment">		&#125;*/</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="StateParameter"><a href="#StateParameter" class="headerlink" title="StateParameter"></a>StateParameter</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.sp.base.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StateParameter</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String SUCCESS=<span class="string">"1"</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">final</span>  <span class="keyword">static</span> String FAULT=<span class="string">"0"</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String DATA=<span class="string">"data"</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String STATE=<span class="string">"state"</span>;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">t4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String key = <span class="string">"cs"</span>;</span><br><span class="line">        redisUtil.set(key, <span class="string">"测试数据"</span>, RedisConstants.datebase0);</span><br><span class="line">        String value = redisUtil.get(key,RedisConstants.datebase0).toString();</span><br><span class="line">        logger.info(<span class="string">"redisValue"</span>+value);</span><br><span class="line">        logger.info(<span class="string">"读取redis成功"</span>);</span><br><span class="line">        System.out.println(StateParameter.SUCCESS + value + <span class="string">"成功"</span>); <span class="comment">//可以用作返回值</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">t5</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            User user = <span class="keyword">new</span> User();</span><br><span class="line">            user.setUsrName(<span class="string">"隔壁老王"</span>);</span><br><span class="line"><span class="comment">//            user.setUsrId(getUuid());</span></span><br><span class="line">            redisUtil.set(<span class="string">"user"</span>,user, RedisConstants.datebase0);</span><br><span class="line">            User res = (User)redisUtil.get(<span class="string">"user"</span>,RedisConstants.datebase0);</span><br><span class="line">            logger.info(<span class="string">"res="</span>+res.toString());</span><br><span class="line">            logger.info(<span class="string">"读取redis成功"</span>);</span><br><span class="line"><span class="comment">//            return getModelMap(StateParameter.SUCCESS, res, "操作成功");</span></span><br><span class="line">            System.out.println(StateParameter.SUCCESS + res + <span class="string">"操作成功"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line"><span class="comment">//            return getModelMap(StateParameter.FAULT, null, "操作失败");</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <tags>
        <tag>Redis</tag>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis</title>
    <url>/2020/03/03/Redis/</url>
    <content><![CDATA[<h1 id="Redis简介"><a href="#Redis简介" class="headerlink" title="Redis简介"></a>Redis简介</h1><p><a href="/2020/03/03/Redis/redis-white.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2020/03/03/Redis/redis-white.png" class="lazyload"></a></p>
<blockquote>
<p><a href="https://redis.io/" target="_blank" rel="noopener">Redis</a>是完全开源免费的，遵守BSD协议，是一个高性能(NOSQL)的key-v<br>alue数据库, Redis是一个开源的使用ANSI  C语言 编写、支持网络、可基于内<br>存亦可持久化的日志型、Key-Value 数据库，并提供多种语言的API。从2010<br>年3月15日起，Redis 的开发工作由VMware主持。从2013年5月开始，Redis<br>的开发由Pivotal赞助。(Vmware 在资助看redis项目的开发和维护)</p>
<hr>


<p>BSD是”Derkeley Software Distribution”的缩写，意思是“伯克利软件发行版”。<br>BSD开源协议是一个给于使用者很大自由的协议。可以自由的使用，修改源代码，也可以将修改后的代码<br>作为开源或者专有软件再发布。BSD代码鼓励代码共享，但需要尊重代码作者的著作权。BSD由于允t许使用<br>者能改和重新发布代码，也允许使用或在BSD代码上开发商业软件发布和销售，因此是对商业很友好的协议。</p>
</blockquote>
<a id="more"></a>

<h2 id="NoSQL介绍"><a href="#NoSQL介绍" class="headerlink" title="NoSQL介绍"></a>NoSQL介绍</h2><blockquote>
<p>NoSQL,泛指非关系型的数据库。随着互联网web2.0网站的兴起，传统的关系数<br>据库在应付web2.0网站，特别是超大规模和高并发的SNS类型的web2.0纯动态<br>网站已经显得力不从心，暴露了很多难以克服的问题，而非关系型的数据库则由<br>于其本身的特点得到了非常迅速的发展。NoSQL数据库的产生就是为了解决大规<br>模数据集合多重数据种类带来的挑战，尤其是大数据应用难题。</p>
</blockquote>
<h2 id="NoSQL数据库的四大分类"><a href="#NoSQL数据库的四大分类" class="headerlink" title="NoSQL数据库的四大分类"></a>NoSQL数据库的四大分类</h2><blockquote>
<h4 id="键值-Key-Value-存储数据库"><a href="#键值-Key-Value-存储数据库" class="headerlink" title="键值(Key-Value)存储数据库"></a>键值(Key-Value)存储数据库</h4><p>这一类数据库主要会使用到一个哈希表，这个表中有一个特定的键和一个指针指<br>向特定的数据。Key/value模型对于IT系统来说的优势在于简单、易部署。但是如果DBA 只对部分值进行查询或更新的时候，Key/value 就显得效率低下了。<br>举例如: TokyoCabinet/Tyrant, Redis, Voldemort, Oracle BDp.</p>
</blockquote>
<blockquote>
<h4 id="列存储数据库"><a href="#列存储数据库" class="headerlink" title="列存储数据库"></a>列存储数据库</h4><p>这部分数据库通常是用来应对分布式存储的海量数据。键仍然存在，但是它们的特<br>点是指向了多个列。这些列是由列家族来安排的。如: Cassandra, HBase, Riak.</p>
</blockquote>
<blockquote>
<h4 id="文档型数据库"><a href="#文档型数据库" class="headerlink" title="文档型数据库"></a>文档型数据库</h4><p>文档型数据库的灵感是来自于Lotus Notes办公软件的，而且它同第一种 键值存储<br>相类似。该类型的数据模型是版本化的文档,半结构化的文档以特定的格式存储,比如JSON。<br>文档型数据库可以看作是键值数据库的升级版，允许之间嵌套键值。而且文档型数据库比键值数据库的查询效率更高。如: CouchDB, MongoDb. 国内也有文档型数据库SequoiaDB,已经开源。</p>
</blockquote>
<blockquote>
<h4 id="图形-Graph-数据库"><a href="#图形-Graph-数据库" class="headerlink" title="图形(Graph)数据库"></a>图形(Graph)数据库</h4><p>图形结构的数据库同其他行列以及刚性结构的SQL数据库不同,它是使用灵活的图<br>形模型，并且能够扩展到多个服务器上。NoSQL 数据库没有标准的查询语言(SQL)，因此进行数据库查询需要制定数据模型。许多NoSQL数据库都有REST式的数据接口或者查询API。<br>如: Neo4J， InfoGrid, Infinite Gr aph.</p>
<hr>
</blockquote>
<p><strong>因此，我们总结NoSQL数据库在以下的这几种情况下比较适用:</strong> </p>
<ol>
<li>数据模型比较简单;</li>
<li>需要灵活性更强的IT系统;</li>
<li>对数据库性能要求较高; </li>
<li>不需要高度的数据一致</li>
<li>对于给定key,比较容易映射复杂值的环境。</li>
</ol>
<h2 id="Redis与其他key-value-缓存产品有以下三个特点"><a href="#Redis与其他key-value-缓存产品有以下三个特点" class="headerlink" title="Redis与其他key - value 缓存产品有以下三个特点:"></a>Redis与其他key - value 缓存产品有以下三个特点:</h2><ul>
<li>Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。</li>
<li>Redis 不仅仅支持简单的key-value类型的数据，同时还提供list, set, zset, hash 等数据结构的存储。</li>
<li>Redis 支持数据的备份，集群等高可用功能。</li>
</ul>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul>
<li>性能极高 - Redis 能读的速度是110000次/s,写的速度是81000次/s</li>
<li>丰富的数据类型 - Redis 支持的类型String, List, Hash, Set及Ordered Set数据类型操作。</li>
<li>原子-Redis 的所有操作都是原子性的，意思就是要么成功执行要么失败完全不执行。</li>
<li>单个操作是原子性的。多个操作也支持事务，即原子性,通过MULTI和EXEC指令包起来。</li>
<li>丰富的特性- Redis 还支持publish/subscribe,通知，key 过期等等特性。</li>
</ul>
<blockquote>
<p>Redis是一一个简单的， 高效的，分布式的，基于内存的缓存工具。<br>架设好服务器后，通过网络连接(类似数据库)，提供Key - Value式缓存服务。<br>简单，是Redis突出的特色。<br>简单可以保证核心功能的稳定和优异。</p>
</blockquote>
<h2 id="Redis总结"><a href="#Redis总结" class="headerlink" title="Redis总结"></a>Redis总结</h2><blockquote>
<p>redis单个key存入512M大小.<br>redis支持多种类型的数据结构(string list,hash set .zset)<br>redis是单线程    原子性<br>redis可以持久化因为使用了RDB和AOF机制<br>redis支持集群  而且redis支持库(0-15)16个库<br>redis还可以做消息队列比如聊天室  IM</p>
</blockquote>
<blockquote>
<p>企业级开发中:可以用作数据库、缓存(热点数据(经常会被查询，但是不经常被修改或者删除的数据)和消息中间件等大部分功能。</p>
</blockquote>
<p><strong>优点</strong></p>
<ul>
<li>优点:</li>
<li>丰富的数据结构</li>
<li>高速读写,redis使用自己实现的分离器，代码量很短,没有使用lock(MySQL),因此效率非常高。</li>
</ul>
<p><strong>缺点</strong></p>
<ul>
<li>持久化。Redis直接将数据存储到内存中，要将数据保存到磁盘上，Redis可以使用两种方式实现持久化过程。定时快照(snapshot): 每隔一段时间将整个数据库写到磁盘上，每次均是写全部数据，代价非常高。第二种方式基于语句追加(aof): 只追踪变化的数据，但是追加的log可能过大，同时所有的操作均重新执行一遍，恢复复速度慢。</li>
<li>耗内存，占用内存过高。</li>
</ul>
<h1 id="Redis安装"><a href="#Redis安装" class="headerlink" title="Redis安装"></a>Redis安装</h1><blockquote>
<p>Redis是C语言开发，安装Redis需要先将官网下载的源码进行编译，编译依赖gcc环境，如果没有 gcc环境，需要安装gcc.</p>
</blockquote>
<blockquote>
<p>Linux系统上安装gcc</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y gcc gcc-c++</span><br></pre></td></tr></table></figure></div>
</blockquote>
<p>将Redis通过 Xftp 上传到Linux</p>
<blockquote>
<p>解压Redis 并 进入目录 并 编译（也可以分开运行）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -zxvf redis-5.0.7.tar.gz &amp;&amp; cd redis-5.0.7 &amp;&amp; make</span><br></pre></td></tr></table></figure></div>
</blockquote>
<blockquote>
<p>安装编译后的文件</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">make PREFIX&#x3D;&#x2F;usr&#x2F;local&#x2F;redis install</span><br></pre></td></tr></table></figure></div>
</blockquote>
<p>没有报错的话就安装完成了</p>
<h1 id="Redis启动"><a href="#Redis启动" class="headerlink" title="Redis启动"></a>Redis启动</h1><h2 id="启动Redis服务"><a href="#启动Redis服务" class="headerlink" title="启动Redis服务"></a>启动Redis服务</h2><p>进入对应的安装目录</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;local&#x2F;redis</span><br></pre></td></tr></table></figure></div>

<p>执行命令</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;bin&#x2F;redis-server</span><br></pre></td></tr></table></figure></div>

<p>这就可以看到Redis成功启动</p>
<p><a href="/2020/03/03/Redis/Redis-%E5%90%AF%E5%8A%A8%E6%88%90%E5%8A%9F%E5%9B%BE.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2020/03/03/Redis/Redis-%E5%90%AF%E5%8A%A8%E6%88%90%E5%8A%9F%E5%9B%BE.png" class="lazyload"></a></p>
<p>Port为端口号</p>
<h2 id="启动Redis的客户端"><a href="#启动Redis的客户端" class="headerlink" title="启动Redis的客户端"></a>启动Redis的客户端</h2><p>进入Redis客户端 （Clone Session 克隆一个窗口）</p>
<p>进入对应的安装目录</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;local&#x2F;redis</span><br></pre></td></tr></table></figure></div>

<p>执行命令</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;bin&#x2F;redis-cli</span><br></pre></td></tr></table></figure></div>

<p><a href="/2020/03/03/Redis/9P5I%7DQZ%60K41PET@BKIGRAED.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2020/03/03/Redis/9P5I%7DQZ%60K41PET@BKIGRAED.png" class="lazyload"></a></p>
<p>看到这个就表示启动成功了</p>
<blockquote>
<p>启动Redis客户端命令</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis-cli -h IP地址 -p端口</span><br></pre></td></tr></table></figure></div>

<p>退出客户端命令</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Ctrl+c</span><br></pre></td></tr></table></figure></div>
</blockquote>
<p><strong>检测是否服务端启动</strong></p>
<p>启动redis 客户端，打开终端输入命令 redis-cli 该命令会连接本地的redis服务</p>
<p>使用 ping 命令检查是否成功</p>
<p><a href="/2020/03/03/Redis/%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%90%AF%E5%8A%A8%E6%88%90%E5%8A%9F.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2020/03/03/Redis/%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%90%AF%E5%8A%A8%E6%88%90%E5%8A%9F.png" class="lazyload"></a></p>
<p>输出为PONG表示成功</p>
<h1 id="Linux-配置-Redis"><a href="#Linux-配置-Redis" class="headerlink" title="Linux 配置 Redis"></a>Linux 配置 Redis</h1><blockquote>
<p>Redis的配置文件位于Redis 安装目录下，文件名为redis. conf (windows名<br>为redis. windows. conf)。</p>
</blockquote>
<p>首先找到 Redis配置文件 redis.conf</p>
<p>打开终端输入<code>ll</code> 打印文件目录 找到 redis 安装目录，执行命令进入</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd redis-5.0.7</span><br></pre></td></tr></table></figure></div>

<p><a href="/2020/03/03/Redis/redisconf.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2020/03/03/Redis/redisconf.png" class="lazyload"></a></p>
<p>下一步就是把redis.conf复制到 redis安装目录下 与bin同级</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp redis.conf &#x2F;usr&#x2F;local&#x2F;redis   这里是我的安装目录</span><br></pre></td></tr></table></figure></div>

<p>复制完之后进入目录查看</p>
<p><a href="/2020/03/03/Redis/%E5%A4%8D%E5%88%B6%E6%88%90%E5%8A%9F.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2020/03/03/Redis/%E5%A4%8D%E5%88%B6%E6%88%90%E5%8A%9F.png" class="lazyload"></a></p>
<p>Redis 配置至此全部完成</p>
<h2 id="Redis-conf配置文件详解"><a href="#Redis-conf配置文件详解" class="headerlink" title="Redis.conf配置文件详解"></a>Redis.conf配置文件详解</h2><p>redis. conf 配置项说明如下:</p>
<ol>
<li><p>Redis默认不是以守护进程的方式运行,可以通过该配置项修改,使用yes启用守护进程</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">daemonize no</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<ol start="2">
<li><p>当Redis以守护进程方式运行时，Redis 默认会把pid写入/var/run/redis pid文件,可以通过pidfile指定</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pidfile &#x2F;var&#x2F;run&#x2F;redis.pid</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<ol start="3">
<li><p>指定Redis监听端口,默认端口为6379,为什么选用6379作为默认端口，因为6379在手机按键上MERZ对应的号码，而MERZ取自意大利歌女Alessia Merz 的名字</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">port 6379</span><br></pre></td></tr></table></figure></div>



</li>
</ol>
<ol start="4">
<li><p>这玩意太多了不想写。。。。。。</p>
</li>
</ol>
<p><a href="https://blog.csdn.net/ymrfzr/article/details/51362125?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">https://blog.csdn.net/ymrfzr/article/details/51362125?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task</a></p>
<p>使用命令查看 Redis.conf文件</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">less -mN redis.conf</span><br></pre></td></tr></table></figure></div>

<p><a href="/2020/03/03/Redis/conf1.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2020/03/03/Redis/conf1.png" class="lazyload"></a></p>
<p>bind 为 绑定 你的IP地址，表示Redis只有你才能连接</p>
<p>使用命令 / 在文件中搜索关键字</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;关键字</span><br></pre></td></tr></table></figure></div>

<p><a href="/2020/03/03/Redis/daemonize.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2020/03/03/Redis/daemonize.png" class="lazyload"></a></p>
<p>daemonize no 表示不是以守护进程的方式运行</p>
<p>将这个改为 yes 表示以守护进程的方式运行</p>
<p><a href="/2020/03/03/Redis/%E5%90%AF%E5%8A%A8%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2020/03/03/Redis/%E5%90%AF%E5%8A%A8%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B.png" class="lazyload"></a></p>
<p>你就可以在启动redis服务的页面继续使用命令了，没有启用之前是不可以的</p>
<p><strong>使用编程模式修改文件</strong></p>
<p>使用命令 vim redis.conf 修改 文件 （在redis目录中）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">按ESC键 跳到命令模式，然后：</span><br><span class="line"></span><br><span class="line">:w 保存文件但不退出vi</span><br><span class="line"></span><br><span class="line">:w file 将修改另外保存到file中，不退出vi</span><br><span class="line"></span><br><span class="line">:w! 强制保存，不推出vi</span><br><span class="line"></span><br><span class="line">:wq 保存文件并退出vi</span><br><span class="line"></span><br><span class="line">:wq! 强制保存文件，并退出vi</span><br><span class="line"></span><br><span class="line">:q 不保存文件，退出vi</span><br><span class="line"></span><br><span class="line">:q! 不保存文件，强制退出vi</span><br><span class="line"></span><br><span class="line">:e! 放弃所有修改，从上次保存文件开始再编辑</span><br><span class="line"></span><br><span class="line">i 修改</span><br><span class="line">u 撤回</span><br></pre></td></tr></table></figure></div>

<h2 id="自定义配置Redis"><a href="#自定义配置Redis" class="headerlink" title="自定义配置Redis"></a>自定义配置Redis</h2><p>下面几个默认配置必须修改</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">daemonized no 修改为 daemonized yes</span><br><span class="line">bind 127.0.0.1 注释掉</span><br><span class="line">requirepass 设置密码</span><br></pre></td></tr></table></figure></div>



<h1 id="Redis启动-1"><a href="#Redis启动-1" class="headerlink" title="Redis启动"></a>Redis启动</h1><h2 id="服务端启动"><a href="#服务端启动" class="headerlink" title="服务端启动"></a>服务端启动</h2><p>在 /user/local/redis 目录下</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;bin&#x2F;redis-server .&#x2F;redis.conf</span><br></pre></td></tr></table></figure></div>

<p><a href="/2020/03/03/Redis/redis%E5%90%AF%E5%8A%A82.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2020/03/03/Redis/redis%E5%90%AF%E5%8A%A82.png" class="lazyload"></a></p>
<p>查看已启动的进程</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ps -ef | grep -i redis</span><br></pre></td></tr></table></figure></div>

<h2 id="客户端启动"><a href="#客户端启动" class="headerlink" title="客户端启动"></a>客户端启动</h2><p>同样是在 /user/local/redis 目录下</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;bin&#x2F;redis-cli</span><br></pre></td></tr></table></figure></div>



<h3 id="远程服务上执行命令"><a href="#远程服务上执行命令" class="headerlink" title="远程服务上执行命令"></a>远程服务上执行命令</h3><p>如果需要在远程redis 服务，上执行命令，同样我们使用的也是redis-cli 命令。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis-cli -h host -p port -a password</span><br><span class="line">redis-cli -h IP地址 -p 端口 -a 密码</span><br></pre></td></tr></table></figure></div>

<h3 id="本地登录"><a href="#本地登录" class="headerlink" title="本地登录"></a>本地登录</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;bin&#x2F;redis-cli -a yizhiduxiu</span><br></pre></td></tr></table></figure></div>

<h1 id="Redis关闭"><a href="#Redis关闭" class="headerlink" title="Redis关闭"></a>Redis关闭</h1><ol>
<li><p>断电、非正常关闭。容易数据丢失</p>
<p>查询PID </p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ps -ef | grep -i redis</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kill -9 PID 直接杀进程</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>正常关闭、数据保存</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;bin&#x2F;redis-cli shutdown</span><br></pre></td></tr></table></figure></div>

<p>如果redis设置了密码，需要先在客户端通过密码登录，再进行 shutdown即可关闭</p>
</li>
</ol>
<h1 id="Redis命令描述"><a href="#Redis命令描述" class="headerlink" title="Redis命令描述"></a>Redis命令描述</h1><blockquote>
<p>Redlis命令用于在redis服务上执行操作。<br>要在redis服务上执行命令需要一个 redis客户端。<br>Redis客户端在我们之前下载的的redis的安装包中。</p>
</blockquote>
<h2 id="Redis键-key"><a href="#Redis键-key" class="headerlink" title="Redis键 key"></a>Redis键 key</h2><blockquote>
<p><strong>Redis键命令用于管理redis的键</strong><br><code>DEL key</code><br>该命令用于在key 存在时删除key。</p>
<p><code>DUMP key</code><br>序列化给定key，并返回被序列化的值。</p>
<p><code>EXISTS key</code><br>检查给定key 是否存在。</p>
<p><code>EXPIRE key seconds</code><br>为给定key设置过期时间(以秒计)。</p>
<p><code>PEXPIRE key milliseconds</code><br>设置key的过期时间以毫秒计。</p>
<p><code>TTL key</code><br>以秒为单位，返回给定key 的剩余生存时间(TL, time to live)  -1为永久有效  -2为无效</p>
<p><code>PTTL key</code><br>以毫秒为单位返回key的剩余的过期时间。</p>
<p><code>PERSIST KEY</code></p>
<p>移除key的过期时间，key 将持久保持</p>
<p><code>KEYS pattern</code><br>查找所有符合给定模式( pattern)的 key 。<br>keys通配符     获取所有与pattern匹配的key,返回所有与该匹配<br>通配符:<br>            *代表所有<br>            ?表示代表-一个字符<br><code>RANDOMKEY</code><br>从当前数据库中随机返回一个key。</p>
<p><code>RENAME key newkey</code><br>修改Key的名称</p>
<p><code>MOVE key db</code><br>将当前数据库的key 移动到给定的数据库db 当中</p>
<p><code>select 0</code></p>
<p>表示切换数据库 0为第一个</p>
<p><code>type key</code></p>
<p>查看类型</p>
<p><code>flushdb</code></p>
<p>删除数据库内所有数据</p>
</blockquote>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><blockquote>
<p>EXPIRE key seconds<br>1、限时的优惠活动信息<br>2、网站数据缓存(对于一些需要定时更新的数据，例如:积分排行榜)<br>3、手机验证码<br>4、限制网站访客访问频率(例如: 1分钟最多访问10次)</p>
</blockquote>
<p>redis单个 key 存入 512M 大小</p>
<h1 id="key命名规范"><a href="#key命名规范" class="headerlink" title="key命名规范"></a>key命名规范</h1><p>1.key不要太长，尽量不要超过1024字节,这不仅消耗内存，而且会降低查找的效率;<br>2.key也不要太短，太短的话，key的可读性会降低;<br>3.在一个项目中，key 最好使用统一的命名模式， 例如user:123:password;</p>
<p>user 表名 123 id password 对应的数据</p>
<p>4.key区分大小写</p>
<h1 id="Redis数据类型"><a href="#Redis数据类型" class="headerlink" title="Redis数据类型"></a>Redis数据类型</h1><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote>
<p>string是redis最基本的类型，一个key对应一个value.<br>string类型是二进制安全的。意思是redis的string可以包含任何数据。比如jpg图片或者序列化的对象<br>string类型是Redis最基本的数据类型，一个键最大能存储512MB。<br><span style="color:red">二进制安全是指，在传输数据时，保证二进制数据的信息安全，也就是不被篡<br>改、破译等，如果被攻击，能够及时检测出来</span><br>二进制安全特点:<br>1、编码、解码发生在客户端完成，执行效率高<br>2、不需要频繁的编解码，不会出现乱码</p>
</blockquote>
<h2 id="String命令"><a href="#String命令" class="headerlink" title="String命令"></a>String命令</h2><h3 id="赋值语法"><a href="#赋值语法" class="headerlink" title="赋值语法:"></a><strong>赋值语法:</strong></h3><blockquote>
<p><span style="color:red">SET KEY_NAME VALUE</span><br>Redis SET命令用于设置给定key 的值。如果key已经存储值，SET 就覆写旧值，且无视类型</p>
<p><span style="color:red">SETNX key value</span> //解决分布式锁 方案之一<br>只有在key不存在时设置key 的值。Setnx ( SET if Not eXists)命令 在指定的key 不存在时，为key设置指定的值，相当于创建一个key并赋值</p>
<p><span style="color:red">MSET key value [key value …]</span><br>同时设置一个或多个key -value对</p>
</blockquote>
<h3 id="取值语法"><a href="#取值语法" class="headerlink" title="取值语法:"></a><strong>取值语法:</strong></h3><blockquote>
<p><span style="color:red">GET KEY_ NAME</span><br>Redis GET命令用于获取指定key 的值。如果key不存在，返回nil。如果key储存的<br>值不是字符串类型，返回一个错误。</p>
<p><span style="color:red">GETRANGE key start end</span></p>
<p>用于获取存储在指定key 中字符串的子字符串。字符串的截取范围由start 和end两个<br>偏移量决定(包括start 和end在内)</p>
<p><span style="color:red">GETBIT key offset</span><br>对key所储存的字符串值，获取指定偏移量上的位(bit)</p>
<p><span style="color:red">MGET key1 [key2..]</span><br>获取所有(一个或多个)给定key 的值</p>
<p><span style="color:red">GETSET语法：GETSET KEY_ NAME  VALUE</span><br>Getset命令用于设置指定key 的值，并返回key 的旧值,当key 不存在时，返回nil</p>
<p><span style="color:red">STRLEN key</span><br>返回key所储存的字符串值的长度</p>
</blockquote>
<h3 id="删除语法"><a href="#删除语法" class="headerlink" title="删除语法:"></a>删除语法:</h3><blockquote>
<p><span style="color:red">DEL KEY_Name</span></p>
<p>删除指定的 key 如果 删除成功 则返回一个数字</p>
</blockquote>
<h3 id="自增-自减"><a href="#自增-自减" class="headerlink" title="自增/自减:"></a>自增/自减:</h3><blockquote>
<p><span style="color:red">INCR KEY_ Name</span><br>Incr命令将key中储存的数字值增1。如果key不存在，那么key的值会先被初始化为<br>0 ,然后再执行INCR操作</p>
<p><span style="color:red">自增: INCRBY KEY_Name增量值</span><br>Incrby命令将key中储存的数字加上指定的增量值</p>
<p><span style="color:red">自减: DECR KEY_NAME  或  DECYBY KEY_NAME 减值</span><br>decR命令将key中储存的数字减1</p>
<p><span style="color:red">字符串拼接: APPEND KEY_NAME VALUE</span><br>Append命令用于为指定的key 追加至未尾，如果不存在，为其赋值</p>
</blockquote>
<h3 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h3><blockquote>
<p>1、String通常用于保存单个字符串或JSON字符串数据<br>2、因String是二进制安全的，所以你完全可以把一个图片文件的内容作为字符串来存储<br>3、计数器(常规key-value缓存应用。常规计数:微博数,粉丝数)<br>INCR等指令本身就具有原子操作的特性,所以我们完全可以利用redis的INCR、INCRBY、DECR、<br>DECRBY等指令来实现原子计数的效果。假如,在某种场景下有3个客户端同时读取了mynum的值(值为2),然后对其同时进行了加1的操作,那么，最后mynum的值一定是5。不少网站都利用redis的这个特性来实现业务.上的统计计数需求。</p>
</blockquote>
<h2 id="哈希（Hash）"><a href="#哈希（Hash）" class="headerlink" title="哈希（Hash）"></a>哈希（Hash）</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><blockquote>
<p>Redis hash是一个string类型的 field和value 的映射表，hash 特别适合用于存储对象。Redis 中每个hash可以存储2的32次方-1 键值对(40 多亿)<br>可以看成具有KEY和VALUE的MAP容器，该类型非常适合于存储值对象的信息，<br>如: uname, upass, age等。该类型的数据仅占用很少的磁盘空间(相比于JSON)</p>
</blockquote>
<h3 id="Hash命令"><a href="#Hash命令" class="headerlink" title="Hash命令"></a>Hash命令</h3><h4 id="赋值语法："><a href="#赋值语法：" class="headerlink" title="赋值语法："></a>赋值语法：</h4><blockquote>
<p><span style="color:red">HSET KEY FIELD VALUE</span>  //为指定 的KEY,设定FILD/VALUE<br><span style="color:red">HMSET KEY FIELD VALUE [FIELD1, VALUE1]</span>…..同时将多个field-value(域-值)对设置到哈希表key中。<br>hmset users uname guo age 20 address “北京市”<br>其中 String可以覆盖 hmset，反之会报错</p>
</blockquote>
<h4 id="取值语法："><a href="#取值语法：" class="headerlink" title="取值语法："></a><strong>取值语法：</strong></h4><blockquote>
<p><span style="color:red">HGET KEY FIELD</span>      //获取存 储在HASH中的值，根据FIELD得到VALUE<br><span style="color:red">HMGET key field[field1]    </span>//获取 key所有给定字段的值<br><span style="color:red">HGETALL key    </span>//返回HASH表中所有的字段和值<br><span style="color:red">HKEYS key     </span>//获取所有 哈希表中的字段<br><span style="color:red">HLEN key    </span>// 获取哈希表中字段的数量</p>
</blockquote>
<h4 id="删除语法-1"><a href="#删除语法-1" class="headerlink" title="删除语法"></a>删除语法</h4><p>DEL KEY</p>
<p>直接删除整个KEY</p>
<p>HDEL KEY FIELD</p>
<p>删除某一个属性</p>
<h4 id="其它语法"><a href="#其它语法" class="headerlink" title="其它语法:"></a>其它语法:</h4><blockquote>
<p><span style="color:red">HSETNX key field value</span><br>只有在字段field不存在时，设置哈希表字段的值</p>
<p><span style="color:red">HINCRBY key field increment</span><br>为哈希表key中的指定字段的整数值加上增量increment。</p>
<p><span style="color:red">HINCRBYFLOAT key field increment</span><br>为哈希表key中的指定字段的浮点数值加上增量increment。</p>
<p><span style="color:red">HEXISTS key field</span></p>
<p>查看哈希表 key中，指定的字段是否存在</p>
</blockquote>
<h4 id="应用场景-2"><a href="#应用场景-2" class="headerlink" title="应用场景"></a>应用场景</h4><p>常用于存储对象</p>
<h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><h3 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h3><blockquote>
<p>Redis列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部(左边)或者尾部(右边)一个列表最多可以包含2得32次方- 1个元素(4294967295，每个列表超过40亿个元素) 类似JAVA中的LinkedList</p>
</blockquote>
<h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><h4 id="赋值语法-1"><a href="#赋值语法-1" class="headerlink" title="赋值语法"></a>赋值语法</h4><blockquote>
<p>LPUSH key value1 [value2]  //将 一个或多个值插入到列表头部(从左侧添加)<br>RPUSH key value1 [value2] //在列表 中添加一个或多 个值(从右侧添加)<br>LPUSHX key value //将一个值插入到已存在的列表头部。如果列表不在，操作无效<br>RPUSHX key value //一个值插入已存在的列表尾部(最右边)。如果列表不在,操作无效。</p>
</blockquote>
<h4 id="取值语法-1"><a href="#取值语法-1" class="headerlink" title="取值语法"></a>取值语法</h4><blockquote>
<p>LLEN key //获取列表长度<br>LINDEX key index //通过索 引获取列表中的元素<br>LRANCE key start stop //获 取列表指定范围内的元素</p>
<p>描述:返回列表中指定区间内的元素，区间以偏移里START和END指定。其中0表示表的第一个元素，1表示列表的第二个元素，以此类推。也可以使用负数下标，以-1表示列表的最后一个元素，-2表示列表的倒数第二个元素，以此类推。</p>
</blockquote>
<h4 id="删除语法-2"><a href="#删除语法-2" class="headerlink" title="删除语法"></a>删除语法</h4><blockquote>
<p>LPOP key移出并 获取列表的第一个元素(从左侧删除)</p>
<p>RPOP key移出并 获取列表的最后一个元素(从右侧删除)</p>
<p>BLPOP key1 [key2 ] timeout<br>移出并获取列表的第一个元素，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。timeout为秒</p>
<p>BRPOP key1 [key2 ] timeout<br>移出并获取列表的最后一个元素，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</p>
<p>LTRIM key start stop<br>对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。</p>
</blockquote>
<h4 id="修改语法"><a href="#修改语法" class="headerlink" title="修改语法"></a>修改语法</h4><blockquote>
<p>LSET key index value  通过索 引设置列表元素的值<br>LINSERT key BEFORE |AFTER world value 在列表的元素前或者后插入元素  描述:将值value 插入到列表key 当中，位于值world 之前或之后。</p>
</blockquote>
<h4 id="高级语法"><a href="#高级语法" class="headerlink" title="高级语法"></a>高级语法</h4><blockquote>
<p>RPOPLPUSH source destination<br>移除列表的最后一个元素,并将该元素添加到另一个列表并返回<br>示例描述:<br>RPOPLPUSH a1 a2 //a1 的最后元素移到a2的左侧<br>RPOPLPUSH a1 a1 //循环列表， 将最后元素移到最左侧</p>
<p>BRPOPLPUSH source destination timeout<br>从列表中弹出一个值,将弹出的元素插入到另外一个列表中并返回它;如果列表没有元素<br>会阻塞列表直到等待超时或发现可弹出元素为止。</p>
</blockquote>
<h3 id="应用场景-3"><a href="#应用场景-3" class="headerlink" title="应用场景"></a>应用场景</h3><p>项目常应用于: 1、对数据量大的集合数据删减2、任务队列<br>1、对数据量大的集合数据删减<br>列表数据显示、关注列表、粉丝列表、留言评价等..分页、热点新闻(Top5)等</p>
<p>利用LRANGE还可以很方便的实现分页的功能,在博客系统中,每片博文的评论也可以存入一个单独的list中。</p>
<h2 id="Set类型"><a href="#Set类型" class="headerlink" title="Set类型"></a>Set类型</h2><h3 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h3><blockquote>
<p>Redis的Set 是String类型的无序集合。集合成员是唯-一的,这就意味着集合中不能出现重复的数据。Redis中集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是0(1)。</p>
<p>集合中最大的成员数为2的32次方-1 (4294967295, 每个集合可存储40多亿个成员)。<br>类似于JAVA中的Hashtable 集合<br>redis的集合对象set的底层存储结构特别神奇,底层使用了intset 和hashtable两种数<br>据结构存储的，intset 我们可以理解为数组，hashtable 就是普通的哈希表(key 为set<br>的值，value 为null)。<br>intset内部其实是一个数组(int8_ t coentents[数组)，而且存储数据的时候是有序的，<br>因为在查找数据的时候是通过二分查找来实现的。</p>
</blockquote>
<h3 id="命令-1"><a href="#命令-1" class="headerlink" title="命令"></a>命令</h3><h4 id="赋值语法-2"><a href="#赋值语法-2" class="headerlink" title="赋值语法"></a>赋值语法</h4><blockquote>
<p>SADD key memberl [member2] 向集合添加一一个或多个成员</p>
</blockquote>
<h4 id="取值语法-2"><a href="#取值语法-2" class="headerlink" title="取值语法"></a>取值语法</h4><blockquote>
<p>SCARD key 获取集合的成员数<br>SMEMBERS key 返回集合中的所有成员<br>SISMEMBER key member 判断member元素是否是集合key 的成员(开发中:验证是否<br>存在判断)<br>SRANDMEMBER key [count]返回集合中一个或多个随机数</p>
</blockquote>
<h4 id="删除语法-3"><a href="#删除语法-3" class="headerlink" title="删除语法"></a>删除语法</h4><blockquote>
<p>SREM key member1 [member2] 移除集合中-一个或多个成员<br>SPOP key [count]移除并返回集合中的一个随机元素<br>SMOVE source destination member 将member元素从source 集合移动到destination 集合</p>
</blockquote>
<h4 id="差集语法"><a href="#差集语法" class="headerlink" title="差集语法"></a>差集语法</h4><blockquote>
<p>SDIFF key1 [key2] 返回给定所有集合的差集(左侧)<br>SDIFFSTORE destination key1 [key2]返回给定所有集合的差集并存储在destination 中</p>
</blockquote>
<h4 id="交集语法"><a href="#交集语法" class="headerlink" title="交集语法"></a>交集语法</h4><blockquote>
<p>SINTER key1 [key2]返回给定所有集合的交集(共有数据)<br>SINTERSTORE destination key1 [key2]返回给定所有集合的交集并存储在destination 中</p>
</blockquote>
<h4 id="并集语法"><a href="#并集语法" class="headerlink" title="并集语法"></a>并集语法</h4><blockquote>
<p>SUNION key1 [key2]返回所有给定集合的并集<br>SUNIONSTORE destination key1 [key2]所有给定集合 的并集存储在destination 集合中</p>
</blockquote>
<h3 id="应用场景-4"><a href="#应用场景-4" class="headerlink" title="应用场景"></a>应用场景</h3><blockquote>
<p>常应用于:对两个集合间的数据[计算]进行交集、并集、差集运算</p>
<p>1、以非常方便的实现如共同关注，共同喜好。二度好友等功能。对上面的所有<br>集合操作，你还可以使用不同的命令选择将结果返回给客户端还是存储到一个新<br>的集合中。</p>
<p>2、利用唯一性，可以统计访问网站的所有独立IP</p>
</blockquote>
<h2 id="zset"><a href="#zset" class="headerlink" title="zset"></a>zset</h2><p>有序集合(sorted set)</p>
<h3 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h3><blockquote>
<p>1、Redis有序集合和集合一 样也是string类型元素的集合，且不允许重复的成员。<br>2、不同的是每个元素都会关联一个double类型的分数。 redis正是 通过分数来为集合中的成员进行从小到大的排序。<br>3、有序集合的成员是唯一的,但分数(score)却可以重复。<br>4、集合是通过哈希表实现的。集合中最大的成员数为2次方32 - 1 (4294967295,每个集合可存储40多亿个成员)。Redis的ZSet是有序、 且不重复<br>(很多时候，我们都将redis中的有序集合叫做zsets，这是因为在redis中，有序集合相关的操作指令都是以z开头的)</p>
</blockquote>
<h3 id="命令-2"><a href="#命令-2" class="headerlink" title="命令"></a>命令</h3><h4 id="赋值语法-3"><a href="#赋值语法-3" class="headerlink" title="赋值语法:"></a>赋值语法:</h4><blockquote>
<p>ZADD key score1 member1 [score2 member2] : 向有序集合添加一个或多个成员，或者更新已存在成员的分数</p>
</blockquote>
<h4 id="取值语法-3"><a href="#取值语法-3" class="headerlink" title="取值语法:"></a>取值语法:</h4><blockquote>
<p>ZCARD key  : 获取有序集合的成员数<br>ZCOUNT key min max  :计算在有序集合中指定区间分数的成员数<br>ZRANK key member  : 返回有序集合中指定成员的索引<br>ZRANGE key start stop [WITHSCORES] :通过索引区间返回有 序集台成指定区间内的成员(低到高)<br>ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT] :通过分数返回有序集合指定区间内的成员<br>ZREVRANGE key start stop [WITHSCORES] :返回有序集中指定区间内的成员 ，通过索引,分数从高到底<br>ZREVRANGEBYSCORE key max min [WITHSCORES] : 返回有序集中指定分数区间内的成员,分数从高到低排序</p>
</blockquote>
<h4 id="删除语法-4"><a href="#删除语法-4" class="headerlink" title="删除语法:"></a>删除语法:</h4><blockquote>
<p>DEL key :移除集合</p>
<p>ZREM key member [member . ..] :移除有序集合中的一一个或多个成员<br>ZREMRANGEBYRANK key start stop :移除有序集合中给定的排名区间的所有成员(第一名是0) (低到高排序)<br>ZREMRANGEBYSCORE key min max :移除有 序集合中给定的分数区间的所有成员</p>
<p>ZINCRBY key increment member :增加memeber元素的分数increment，返回值是更改后的分数</p>
</blockquote>
<h3 id="应用场景-5"><a href="#应用场景-5" class="headerlink" title="应用场景"></a>应用场景</h3><blockquote>
<p>常应用于:排行榜<br>销量排名,积分排名等<br>1、比如twitter的public timeline可以以发表时间作为score来存储,这样获取时就是自动按时间排好序的。<br>2、比如一个存储全班同学成绩的Sorted Set ,其集合value可以是同学的学号,而score就可以是其考试得分，这样在数据插入集合的时候,就已经进行了天然的排序。<br>3、还可以用Sorted Set来做带权重的队列,比如普通消息的score为1 ,重要消息的score为2 ,然后工作线程可以选择按score的倒序来获取工作任务。让重要的任务优先执行。</p>
</blockquote>
<h2 id="HyperLogLog"><a href="#HyperLogLog" class="headerlink" title="HyperLogLog"></a>HyperLogLog</h2><h3 id="简介-5"><a href="#简介-5" class="headerlink" title="简介"></a>简介</h3><blockquote>
<p>Redis: 在2.8.9版本添加了HyperLogLog 结构。<br>Redis HyperLoglog 是用来做基数统计的算法, HyperLoglog的优点是，在输入元素的数量或者体积非常非常大时，计算基数。所需的空间总是固定的、并且是很小的。</p>
<p>在Redis里面，每个HyperLoglog 键只需要花费12 KB内存,就可以计算接近2的64次方个不同元素的基数。这和计算基数时,元素越多耗费内存就越多的集合形成鲜明对比。<br>但是，因为HyperLoglog 只会根据输入元素来计算基数,而不会储存输入元素本身,所以HyperLoglog不能像集合那样,返回输入的各个元素。</p>
</blockquote>
<blockquote>
<p>小知识:<br>什么是基数?<br>比如數据集{1, 3，5, 7，5，7，8}，那么这个数据集的基数集为{1，3，5 ,7, 8}，基数(不重复元素)为5。<br>基数估计就是在误差可接受的范围内，快速计算基数。</p>
</blockquote>
<h3 id="为什么需要HyperLogLog"><a href="#为什么需要HyperLogLog" class="headerlink" title="为什么需要HyperLogLog"></a>为什么需要HyperLogLog</h3><blockquote>
<p>如果要統计1亿个數据的基数值，大约需要内存10000000/8/1024/1024约等于12M， 内存减少占用的效果显著。<br>然而统计一个对象的基数值需要12M，如果统计10000个对象，就需要将近120G，同样不能广泛用于大数据场最。</p>
</blockquote>
<h3 id="命令-3"><a href="#命令-3" class="headerlink" title="命令"></a>命令</h3><blockquote>
<p>PFADD key element [e1ement .. ] ;添加指定元表到 HyperLoglog 中<br>PFCOUNT key [key ..] :返回给定Hyperloglog 的基数估算值<br>PFMERGE destkey sourcekey [sourcekey .. :将多个HyperLoglog 合井为一个HyperlogLog</p>
</blockquote>
<h3 id="应用场景-6"><a href="#应用场景-6" class="headerlink" title="应用场景"></a>应用场景</h3><blockquote>
<p>基数不大,数据量不大就用不上.会有点大材小用浪费空间<br>有局限性,就是只能统计基数数量，而没办法去知道具体的内容是什么</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">统计注册IP数</span><br><span class="line">统计每日访问IP数</span><br><span class="line">统计页面实时UV數</span><br><span class="line">统计在线用户数</span><br><span class="line">统计用户每天搜索不同词条的个数</span><br><span class="line">统计真实文章阅读数</span><br></pre></td></tr></table></figure></div>

]]></content>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue2</title>
    <url>/2020/02/27/Vue2/</url>
    <content><![CDATA[<h1 id="什么是组件化"><a href="#什么是组件化" class="headerlink" title="什么是组件化"></a>什么是组件化</h1><ul>
<li>人面对复杂问题的处理方式：<ul>
<li>任何一个人处理信息逻辑能力都是有限的</li>
<li>所以，当面对一个非常复杂的问题时，我们不太可能一次性搞定一大堆的内容</li>
<li>但是，我们人有一种天生的能力，就是将问题进行拆解</li>
<li>如果将一个复杂的问题，拆分成很多个可以处理的小问题，再将其放在整体中，你会发现大的问也会迎刃而解。</li>
</ul>
</li>
</ul>
<h1 id="注册组件的基本步骤"><a href="#注册组件的基本步骤" class="headerlink" title="注册组件的基本步骤"></a>注册组件的基本步骤</h1><ul>
<li>组件的使用分成三个步骤<ul>
<li>创建组件构造器</li>
<li>注册组件</li>
<li>使用组件</li>
</ul>
</li>
</ul>
<p><a href="/2020/02/27/Vue2/%E6%B3%A8%E5%86%8C%E7%BB%84%E4%BB%B6%E6%AD%A5%E9%AA%A4.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2020/02/27/Vue2/%E6%B3%A8%E5%86%8C%E7%BB%84%E4%BB%B6%E6%AD%A5%E9%AA%A4.png" class="lazyload"></a></p>
]]></content>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Thymeleaf 模板引擎</title>
    <url>/2020/02/25/Thymeleaf-%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/</url>
    <content><![CDATA[<h1 id="Thymeleaf-简介"><a href="#Thymeleaf-简介" class="headerlink" title="Thymeleaf 简介"></a>Thymeleaf 简介</h1><p><a href="/2020/02/25/Thymeleaf-%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/Thymeleay.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="/2020/02/25/Thymeleaf-%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/Thymeleay.png" class="lazyload"></a></p>
<blockquote>
<p>官网部分翻译：反正就是各种好</p>
<ul>
<li>Thymeleaf是用来开发Web和独立环境项目的服务器端的Java模版引擎</li>
<li>Spring官方支持的服务的渲染模板中，并不包含jsp。而是Thymeleaf和Freemarker等，而Thymeleaf与SpringMVC的视图技术，及SpringBoot的自动化配置集成非常完美，几乎没有任何成本，你只用关注Thymeleaf的语法即可。</li>
</ul>
</blockquote>
<a id="more"></a>

<h1 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h1><p>创建SpringBoot项目，在选择模块 <strong>Template Engines</strong> 中勾选 <strong>Thymeleaf</strong>，</p>
<p>或者在创好项目之后再pom.xml文件中导入依赖 </p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>nz.net.ultraq.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-layout-dialect<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>在项目resource目录中的templates创建html页面</p>
<p>创建好html后需要在顶部的 html 标签中声明 thymeleaf 就可以使用它的语法了</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<blockquote>
<p>使用前在application.properties中配置</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">properties</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.thymeleaf.cache</span>=<span class="string">false</span></span><br></pre></td></tr></table></figure></div>
</blockquote>
<p>作用：关闭Thymeleaf的缓存，修改页面后立即生效</p>
</blockquote>
<h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><h2 id="一、标准表达式语法"><a href="#一、标准表达式语法" class="headerlink" title="一、标准表达式语法"></a>一、标准表达式语法</h2><h3 id="它又分为："><a href="#它又分为：" class="headerlink" title="它又分为："></a>它又分为：</h3><ul>
<li>消息</li>
<li>变量</li>
<li>选择表达式</li>
<li>链接URL</li>
<li>片段</li>
<li>文字</li>
<li>附加文本</li>
<li>字面替代</li>
<li>算术运算</li>
<li>比较与平等</li>
<li>条件表达式</li>
<li>默认表达式</li>
<li>无操作令牌</li>
<li>数据转换/格式化</li>
<li>预处理</li>
</ul>
<h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Today is: <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;today&#125;"</span>&gt;</span>13 february 2011<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>意味着 &lt; span &gt;标签中的内容会被表达式${today}的值所替代，无论模板中它的内容是什么，之所以在模板中“多此一举“地填充它的内容，完全是为了它能够作为原型在浏览器中直接显示出来。<br>假设today的值为2015年8月14日，那么渲染结果为：&lt; p &gt;Today is: 2015年8月14日.&lt; /p &gt;。可见Thymeleaf的基本变量和JSP一样，都使用${.}表示获取变量的值。</p>
</blockquote>
<h4 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h4><p>URL在Web应用模板中占据着十分重要的地位，需要特别注意的是Thymeleaf对于URL的处理是通过语法@{…}来处理的。Thymeleaf支持绝对路径URL：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;http://www.thymeleaf.org&#125;"</span>&gt;</span>Thymeleaf<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>同时也能够支持相对路径URL：</p>
<p>另外，如果需要Thymeleaf对URL进行渲染，那么务必使用<code>th:href</code>，<code>th:src</code>等属性，下面是一个例子</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Will produce 'http://localhost:8080/gtvg/order/details?orderId=3' (plus rewriting) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"details.html"</span> </span></span><br><span class="line"><span class="tag">   <span class="attr">th:href</span>=<span class="string">"@&#123;http://localhost:8080/gtvg/order/details(orderId=$&#123;o.id&#125;)&#125;"</span>&gt;</span>view<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Will produce '/gtvg/order/details?orderId=3' (plus rewriting) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"details.html"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/order/details(orderId=$&#123;o.id&#125;)&#125;"</span>&gt;</span>view<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Will produce '/gtvg/order/3/details' (plus rewriting) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"details.html"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/order/&#123;orderId&#125;/details(orderId=$&#123;o.id&#125;)&#125;"</span>&gt;</span>view<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>几点说明：<br>上例中URL最后的(orderId=${o.id})表示将括号内的内容作为URL参数处理，该语法避免使用字符串拼接，大大提高了可读性@{…}表达式中可以通过{orderId}访问Context中的orderId变量@{/order}是Context相关的相对路径，在渲染时会自动添加上当前Web应用的Context名字，假设context名字为app，那么结果应该是/app/order</p>
<h4 id="字符串替换"><a href="#字符串替换" class="headerlink" title="字符串替换"></a>字符串替换</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"'Welcome to our application, ' + $&#123;user.name&#125; + '!'"</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>一种更简洁的方式是：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"|Welcome to our application, $&#123;user.name&#125;!|"</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>当然这种形式限制比较多，|…|中只能包含变量表达式${…}，不能包含其他常量、条件表达式等</p>
<h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">th:with</span>=<span class="string">"isEven=($&#123;prodStat.count&#125; % 2 == 0)"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>逻辑运算符<code>&gt;, &lt;, &lt;=,&gt;=，==,!=</code>都可以使用，唯一需要注意的是使用&lt;,&gt;时需要用它的HTML转义符：</p>
<h2 id="二、常用的表达式"><a href="#二、常用的表达式" class="headerlink" title="二、常用的表达式"></a>二、常用的表达式</h2><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><p>使用<code>th:each</code>标签</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>usrId<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>usrName<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>usrRoleId<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>index<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"user,status : $&#123;users&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.usrId&#125;"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.usrName&#125;"</span>&gt;</span>惑<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.usrRoleId&#125;"</span>&gt;</span>惑惑惑惑<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;status.index&#125;"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>status 表示循环状态变量，属性有：</p>
<ul>
<li>index:当前迭代对象的index（从0开始计算）</li>
<li>count: 当前迭代对象的index(从1开始计算)</li>
<li>size:被迭代对象的大小</li>
<li>current:当前迭代变量</li>
<li>even/odd:布尔值，当前循环是否是偶数/奇数（从0开始计算）</li>
<li>first:布尔值，当前循环是否是第一个</li>
<li>last:布尔值，当前循环是否是最后一个</li>
</ul>
<h4 id="if-unless条件求值"><a href="#if-unless条件求值" class="headerlink" title="if / unless条件求值"></a>if / unless条件求值</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:if</span>=<span class="string">"$&#123;flag == 'yes'&#125;"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;http://www.baidu.com/&#125;"</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:unless</span>=<span class="string">"$&#123;flag == 'no'&#125;"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;http://www.baidu.com/&#125;"</span>&gt;</span>百度亿下<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>Thymeleaf中使用th:if和th:unless属性进行条件判断，上面的例子中，div 标签只有在th:if中条件成立时才显示：</p>
</blockquote>
<blockquote>
<p>th:unless于th:if恰好相反，只有表达式中的条件不成立，才会显示其内容。</p>
</blockquote>
<h4 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:switch</span>=<span class="string">"$&#123;sex&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"'woman'"</span>&gt;</span>她是一个姑娘...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"'man'"</span>&gt;</span>这是一个爷们!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- *: case 的默认的选项 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"*"</span>&gt;</span>未知性别的一个家伙。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h4 id="内嵌变量"><a href="#内嵌变量" class="headerlink" title="内嵌变量"></a>内嵌变量</h4><p>为了模板更加易用，Thymeleaf还提供了一系列Utility对象（内置于Context中），可以通过#直接访问：</p>
<ul>
<li>dates ： java.util.Date的功能方法类。</li>
<li>calendars : 类似#dates，面向java.util.Calendar</li>
<li>numbers : 格式化数字的功能方法类</li>
<li>strings : 字符串对象的功能类</li>
<li>objects: 对objects的功能类操作。</li>
<li>bools: 对布尔值求值的功能方法。</li>
<li>arrays：对数组的功能类方法。</li>
<li>lists: 对lists功能类方法</li>
<li>sets</li>
<li>maps</li>
</ul>
<h1 id="常用th标签"><a href="#常用th标签" class="headerlink" title="常用th标签"></a>常用th标签</h1><table>
<thead>
<tr>
<th align="center"><strong>标签</strong></th>
<th align="center"><strong>说明</strong></th>
<th align="center"><strong>例子</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center">th:id</td>
<td align="center">替换id</td>
<td align="center">&lt; input th:id=”‘xxx’ + ${collect.id}”/&gt;</td>
</tr>
<tr>
<td align="center">th:text</td>
<td align="center">文本替换</td>
<td align="center">&lt; p th:text=”${collect.description}”&gt;description&lt; /p&gt;</td>
</tr>
<tr>
<td align="center">th:utext</td>
<td align="center">支持html的文本替换</td>
<td align="center">&lt; p th:utext=”${htmlcontent}”&gt;conten&lt; /p&gt;</td>
</tr>
<tr>
<td align="center">th:object</td>
<td align="center">替换对象</td>
<td align="center">&lt; div th:object=”${session.user}”&gt;</td>
</tr>
<tr>
<td align="center">th:value</td>
<td align="center">属性赋值</td>
<td align="center">&lt; input th:value=”${user.name}” /&gt;</td>
</tr>
<tr>
<td align="center">th:with</td>
<td align="center">变量赋值运算</td>
<td align="center">&lt; div th:with=”isEven=${prodStat.count}%2==0”&gt;&lt; /div&gt;</td>
</tr>
<tr>
<td align="center">th:style</td>
<td align="center">设置样式</td>
<td align="center">th:style=”‘display:’ + @{(${sitrue} ? ‘none’ : ‘inline-block’)} + ‘’”</td>
</tr>
<tr>
<td align="center">th:onclick</td>
<td align="center">点击事件</td>
<td align="center">th:”‘getCollect()’”</td>
</tr>
<tr>
<td align="center">th:each</td>
<td align="center">属性赋值</td>
<td align="center">tr th:each=”user,userStat:${users}”&gt;</td>
</tr>
<tr>
<td align="center">th:if</td>
<td align="center">判断条件</td>
<td align="center">&lt; a th:if=”${userId == collect.userId}” &gt;</td>
</tr>
<tr>
<td align="center">th:unless</td>
<td align="center">和th:if判断相反</td>
<td align="center">&lt; a th:href=”@{/login}” th:unless=${session.user != null}&gt;Login&lt; /a&gt;</td>
</tr>
<tr>
<td align="center">th:href</td>
<td align="center">链接地址</td>
<td align="center">&lt;a th:href=”@{/login}” th:unless=${session.user != null}&gt;Login&lt; /a&gt;</td>
</tr>
<tr>
<td align="center">th:switch</td>
<td align="center">多路选择 配合th:case 使用</td>
<td align="center">&lt; div th:switch=”${user.role}”&gt;</td>
</tr>
<tr>
<td align="center">th:case</td>
<td align="center">th:switch的一个分支</td>
<td align="center">&lt; p th:case=”‘admin’”&gt;User is an administrator&lt; /p&gt;</td>
</tr>
<tr>
<td align="center">th:fragment</td>
<td align="center">布局标签，定义一个代码片段，方便其它地方引用</td>
<td align="center">&lt; div th:fragment=”alert”&gt;</td>
</tr>
<tr>
<td align="center">th:include</td>
<td align="center">布局标签，替换内容到引入的文件</td>
<td align="center">&lt; head th:include=”layout :: htmlhead” th:with=”title=’xx’”&gt;&lt; /head&gt;</td>
</tr>
<tr>
<td align="center">th:replace</td>
<td align="center">布局标签，替换整个标签到引入的文件</td>
<td align="center">&lt; div th:replace=”fragments/header :: title”&gt;&lt; /div&gt;</td>
</tr>
<tr>
<td align="center">th:selected</td>
<td align="center">selected选择框 选中</td>
<td align="center">th:selected=”(${xxx.id} == ${configObj.dd})”</td>
</tr>
<tr>
<td align="center">th:src</td>
<td align="center">图片类地址引入</td>
<td align="center">&lt; img class=”img-responsive” alt=”App Logo” th:src=”@{/img/logo.png}” /&gt;</td>
</tr>
<tr>
<td align="center">th:inline</td>
<td align="center">定义js脚本可以使用变量</td>
<td align="center">&lt; script type=”text/javascript” th:inline=”javascript”&gt;</td>
</tr>
<tr>
<td align="center">th:action</td>
<td align="center">表单提交的地址</td>
<td align="center">&lt; form action=”subscribe.html” th:action=”@{/subscribe}”&gt;</td>
</tr>
<tr>
<td align="center">th:remove</td>
<td align="center">删除某个属性</td>
<td align="center">&lt; tr th:remove=”all”&gt;1.all:删除包含标签和所有的孩子。2.body:不包含标记删除,但删除其所有的孩子。3.tag:包含标记的删除,但不删除它的孩子。4.all-but-first:删除所有包含标签的孩子,除了第一个。5.none:什么也不做。这个值是有用的动态评估。</td>
</tr>
<tr>
<td align="center">th:attr</td>
<td align="center">设置标签属性，多个属性可以用逗号分隔</td>
<td align="center">比如 &lt; p th:attr=”src=@{/image/aa.jpg},title=${title}”&gt;内容&lt; /p&gt;，这样如果${title}=‘这个是title’ 则结果就是&lt; p src=”/image/aa.jpg” title=”这个是title”&gt;内容&lt; /p&gt;</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>Tyhmeleaf</tag>
        <tag>模板引擎</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue</title>
    <url>/2020/02/22/Vue/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>Vue (读音 /vjuː/，类似于 <strong>view</strong>) 是一套用于构建用户界面的<strong>渐进式框架</strong>。</p>
<p>与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。</p>
<p>Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。</p>
<p>另一方面，当与<a href="https://cn.vuejs.org/v2/guide/single-file-components.html" target="_blank" rel="noopener">现代化的工具链</a>以及各种<a href="https://github.com/vuejs/awesome-vue#libraries--plugins" target="_blank" rel="noopener">支持类库</a>结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p>
</blockquote>
<a id="more"></a>

<h1 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h1><p><a href="https://cn.vuejs.org/" target="_blank" rel="noopener">下载</a>vue.js引入</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">	&lt;div id=<span class="string">"app"</span>&gt;&#123;&#123;message&#125;&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">	</span><br><span class="line">&lt;script src=<span class="string">"../js/vue.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/let（变量） const（常量）</span></span><br><span class="line"><span class="regexp">	const app = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">		el: '#app', /</span><span class="regexp">/用于挂载要管理的元素</span></span><br><span class="line"><span class="regexp">		data: &#123; /</span><span class="regexp">/定义数据</span></span><br><span class="line"><span class="regexp">			message: '你好！！！'</span></span><br><span class="line"><span class="regexp">		&#125;</span></span><br><span class="line"><span class="regexp">	&#125;)</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure></div>

<p>“{ { } }”插值表达式用于获取data中定义的数据</p>
<h1 id="Vue中的MVVM"><a href="#Vue中的MVVM" class="headerlink" title="Vue中的MVVM"></a>Vue中的MVVM</h1><p><a href="/2020/02/22/Vue/image-20200215164646264-1582351893242.png" data-fancybox="group" data-caption="image-20200215164646264" class="fancybox"><img alt="image-20200215164646264" title="image-20200215164646264" data-src="/2020/02/22/Vue/image-20200215164646264-1582351893242.png" class="lazyload"></a></p>
<h1 id="案例，Vue计数器"><a href="#案例，Vue计数器" class="headerlink" title="案例，Vue计数器"></a>案例，Vue计数器</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前计数：&#123;&#123;counter&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- &lt;button v-on:click="counter++"&gt;+&lt;/button&gt;</span></span><br><span class="line"><span class="comment">			&lt;button v-on:click="counter--"&gt;-&lt;/button&gt; --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"add"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"sub"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">		<span class="keyword">const</span> obj = &#123;</span></span><br><span class="line">			counter: 0,</span><br><span class="line"><span class="actionscript">			message: <span class="string">'abc'</span></span></span><br><span class="line">		&#125;</span><br><span class="line"><span class="actionscript">		<span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">			el: <span class="string">'#app'</span>,</span></span><br><span class="line">			data: obj,</span><br><span class="line">			methods:&#123;</span><br><span class="line"><span class="actionscript">				add:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">					<span class="built_in">console</span>.log(<span class="string">'add被执行'</span>)</span></span><br><span class="line"><span class="actionscript">					<span class="keyword">this</span>.counter++</span></span><br><span class="line">				&#125;,</span><br><span class="line"><span class="actionscript">				sub:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">					<span class="built_in">console</span>.log(<span class="string">'sub被执行'</span>)</span></span><br><span class="line"><span class="actionscript">					<span class="keyword">this</span>.counter--</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;)</span><br><span class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h1 id="Vue、生命周期"><a href="#Vue、生命周期" class="headerlink" title="Vue、生命周期"></a>Vue、生命周期</h1><h1 id="指令合集"><a href="#指令合集" class="headerlink" title="指令合集"></a>指令合集</h1><h2 id="Mustache（胡子，胡须"><a href="#Mustache（胡子，胡须" class="headerlink" title="{ { } } Mustache（胡子，胡须)"></a><strong>{ { } }</strong> Mustache（胡子，胡须)</h2><p>插值表达式，用于获取Vue对象中定义的数据</p>
<h2 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h2><p>用于绑定事件</p>
<p><strong>语法糖：@click</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"sub"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"sub"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><strong>v-on参数</strong></p>
<ul>
<li><p>当通过methods中定义方法，以供@click调用，需要注意参数问题</p>
</li>
<li><p>情况一：如果该方法不需要额外参数，那么方法后的（）可以不添加</p>
<ul>
<li>但是注意：如果方法本身中有一个参数，那么会默认将原生事件event参数传递进去</li>
</ul>
</li>
<li><p>情况二：如果需要同时传入某个参数，同时需要even时，可以通过$event传入事件</p>
</li>
</ul>
<p><strong>v-on修饰符</strong></p>
<ul>
<li>在某些情况下，我们拿到event的目的可能是进行一些时间处理</li>
<li>Vue提供了修饰符来帮助我们方便的处理一些事件<ul>
<li>.stop 调用event.stopPropagation()</li>
<li>.prevent 调用event.prevenDefault()</li>
<li>.{keyCode | keyAlias} 只当事件是从特定键触发时才触发回调</li>
<li>.native 监听组件根元素的原生事件</li>
<li>.once 只触发一次回调</li>
</ul>
</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 1. .stop修饰符的使用 --&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 阻止冒泡 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">"divClick"</span>&gt;</span></span><br><span class="line">			aaaaaa</span><br><span class="line">			<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">"btnClick"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			</span><br><span class="line">		<span class="comment">&lt;!-- 2. .prevent修饰符的使用 --&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 阻止默认事件 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"baidu"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span> @<span class="attr">click.prevent</span>=<span class="string">"submitClick"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">			</span><br><span class="line">		<span class="comment">&lt;!-- 3. .监听某个键的点击 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> @<span class="attr">keyup.enter</span>=<span class="string">"keyUp"</span>/&gt;</span></span><br><span class="line">			</span><br><span class="line">		<span class="comment">&lt;!-- 4. .once修饰符的使用 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.once</span>=<span class="string">"btn2Click"</span>&gt;</span>按钮2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">		<span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">			el: <span class="string">'#app'</span>,</span></span><br><span class="line">			data: &#123;</span><br><span class="line"><span class="actionscript">				message: <span class="string">'你好'</span></span></span><br><span class="line">			&#125;,</span><br><span class="line">			computed: &#123;&#125;,</span><br><span class="line">			methods: &#123;</span><br><span class="line">				btnClick()&#123;</span><br><span class="line"><span class="javascript">					<span class="built_in">console</span>.log(<span class="string">"btnClick"</span>)</span></span><br><span class="line">				&#125;,</span><br><span class="line">				divClick()&#123;</span><br><span class="line"><span class="javascript">					<span class="built_in">console</span>.log(<span class="string">"divClick"</span>)</span></span><br><span class="line">				&#125;,</span><br><span class="line">				submitClick()&#123;</span><br><span class="line"><span class="javascript">					<span class="built_in">console</span>.log(<span class="string">'submitClick'</span>)</span></span><br><span class="line">				&#125;,</span><br><span class="line">				keyUp()&#123;</span><br><span class="line"><span class="javascript">					<span class="built_in">console</span>.log(<span class="string">"keyUp"</span>)</span></span><br><span class="line">				&#125;,</span><br><span class="line">				btn2Click()&#123;</span><br><span class="line"><span class="javascript">					<span class="built_in">console</span>.log(<span class="string">'btnClick'</span>)</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;)</span><br><span class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h2><blockquote>
<p>该指令后面不需要跟任何表达式</p>
<p>该指令表示元素和组件只渲染一次，不会随着数据的改变而改变</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-once</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h2><p>用于将数据解析成html页面</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;url&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-html</span>=<span class="string">"url"</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">			<span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">				el: <span class="string">'#app'</span>,</span></span><br><span class="line">				data: &#123;</span><br><span class="line"><span class="actionscript">					message: <span class="string">'你好'</span>,</span></span><br><span class="line"><span class="handlebars"><span class="xml">					url: '<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com"</span>&gt;</span>百度一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span>'</span></span></span><br><span class="line">				&#125;,</span><br><span class="line">				methods: &#123;&#125;</span><br><span class="line">			&#125;)</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h2><p>和Mustache作用差不多，但是如果需要在标签内再添加数据时，v-text的数据会覆盖掉其他数据</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-text</span>=<span class="string">"message"</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre"></a>v-pre</h2><p>不解析特殊字符比如{ { } }</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-pre</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a>v-cloak</h2><p>当用户网络状况不好的时候页面可能很久不能加载完成，可能会出现不友好的页面</p>
<p><a href="/2020/02/22/Vue/image-20200215184527775-1582351886538.png" data-fancybox="group" data-caption="image-20200215184527775" class="fancybox"><img alt="image-20200215184527775" title="image-20200215184527775" data-src="/2020/02/22/Vue/image-20200215184527775-1582351886538.png" class="lazyload"></a></p>
<p>使用v-cloak消除不友好页面</p>
<p>设置style样式</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang"></div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">	<span class="selector-attr">[v-cloak]</span>&#123;</span><br><span class="line">		<span class="attribute">display</span>: none;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span> <span class="attr">v-cloak</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">	<span class="comment">// 在vue解析之前，div中有一个属性v-cloak</span></span></span><br><span class="line"><span class="actionscript">	<span class="comment">// 在vue解析之后，div中没有一个属性v-cloak</span></span></span><br><span class="line"><span class="actionscript">	setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123; <span class="comment">// 模拟网络延迟</span></span></span><br><span class="line"><span class="actionscript">		<span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">			el: <span class="string">'#app'</span>,</span></span><br><span class="line">			data: &#123;</span><br><span class="line"><span class="actionscript">				message: <span class="string">'你好'</span></span></span><br><span class="line">			&#125;,</span><br><span class="line">			methods: &#123;&#125;</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;,2000)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h2><p><strong>语法糖： ‘：’</strong></p>
<p><strong>动态绑定属性</strong></p>
<p>属性不像文本值一样能够通过{ { } }绑定，这时可以通过v-bind来绑定</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">"imgURL"</span> <span class="attr">alt</span>=<span class="string">""</span> /&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><strong>动态绑定class（对象语法）</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-bind:class</span>=<span class="string">"&#123;active: isActive,line: isLine&#125;"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>{} 中的属性为键值对，active和line为样式名，其中 isActive和isLine的值为boolean值，可以控制boolean来控制是否使用样式，Boolean为true就使用样式，则反。</p>
<p><strong>但是</strong>这样写感觉代码会很拥挤，可以使用方法的方式来简化代码</p>
</blockquote>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-bind:class</span>=<span class="string">"getClasses()"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">	<span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">		el: <span class="string">'#app'</span>,</span><br><span class="line">		data: &#123;</span><br><span class="line">			message: <span class="string">'你好'</span>,</span><br><span class="line">			isActive: <span class="literal">true</span>,</span><br><span class="line">			isLine: <span class="literal">true</span></span><br><span class="line">		&#125;,</span><br><span class="line">		methods: &#123;</span><br><span class="line">			btnClick()&#123;</span><br><span class="line">				<span class="keyword">this</span>.isActive = !<span class="keyword">this</span>.isActive</span><br><span class="line">			&#125;,</span><br><span class="line">			getClasses: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">				<span class="keyword">return</span> &#123;<span class="attr">active</span>: <span class="keyword">this</span>.isActive,<span class="attr">line</span>: <span class="keyword">this</span>.isLine&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>注意使用v-bind绑定方法需要加 （）</p>
<p><strong>动态绑定class（数组语法）</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"title"</span> <span class="attr">:class</span>=<span class="string">"['active','line']"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>这个效果和下面是一样的,不能实现动态绑定</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"title active line"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>实现动态绑定，将数组中的单引号去除，表示active和line为变量，它就会去data中去找</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"title"</span> <span class="attr">:class</span>=<span class="string">"[active,line]"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>或者通过绑定的方法来实现</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"title"</span> <span class="attr">:class</span>=<span class="string">"getClasses()"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">	<span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">		el: <span class="string">'#app'</span>,</span><br><span class="line">		data: &#123;</span><br><span class="line">			message: <span class="string">'你好'</span>,</span><br><span class="line">			active: <span class="string">'aaa'</span>,</span><br><span class="line">			line: <span class="string">'bbb'</span></span><br><span class="line">		&#125;,</span><br><span class="line">		methods: &#123;</span><br><span class="line">			getClasses: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">				<span class="keyword">return</span> [<span class="keyword">this</span>.active,<span class="keyword">this</span>.line]</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><strong>动态绑定样式</strong>（对象）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- &lt;h2 :style="&#123;key(属性名): value(属性值)&#125;"&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">:style</span>=<span class="string">"&#123;fontSize: '50px'&#125;"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><strong>动态绑定样式</strong>（数组）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">:style</span>=<span class="string">"[baseStyle,baseStyle1]"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">	<span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">		el: <span class="string">'#app'</span>,</span><br><span class="line">		data: &#123;</span><br><span class="line">			message: <span class="string">'你好'</span>,</span><br><span class="line">			baseStyle: &#123;<span class="attr">backgroundColor</span>: <span class="string">'red'</span>&#125;,</span><br><span class="line">			baseStyle1: &#123;<span class="attr">fontSize</span>: <span class="string">'100px'</span>&#125;</span><br><span class="line">		&#125;,</span><br><span class="line">		methods: &#123;&#125;</span><br><span class="line">	&#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="v-if、v-else、v-if-else"><a href="#v-if、v-else、v-if-else" class="headerlink" title="v-if、v-else、v-if-else"></a>v-if、v-else、v-if-else</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-if</span>=<span class="string">"score &gt;= 90"</span>&gt;</span>优秀<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-else-if</span>=<span class="string">"score &gt;= 80"</span>&gt;</span>良好<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-else-if</span>=<span class="string">"score &gt;= 60"</span>&gt;</span>及格<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-else</span>&gt;</span>不及格<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;result&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">			<span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">				el: <span class="string">'#app'</span>,</span></span><br><span class="line">				data: &#123;</span><br><span class="line">					score: 99</span><br><span class="line">				&#125;,</span><br><span class="line">				computed: &#123;</span><br><span class="line">					result() &#123;</span><br><span class="line"><span class="javascript">						<span class="keyword">let</span> showMessage = <span class="string">''</span>;</span></span><br><span class="line"><span class="actionscript">						<span class="keyword">if</span> (<span class="keyword">this</span>.score &gt;= <span class="number">90</span>) &#123;</span></span><br><span class="line"><span class="actionscript">							showMessage = <span class="string">'优秀'</span></span></span><br><span class="line">						&#125;</span><br><span class="line"><span class="actionscript">						<span class="keyword">return</span> showMessage</span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;,</span><br><span class="line">				methods: &#123;</span><br><span class="line">					</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;)</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span>html</span><br></pre></td></tr></table></figure></div>

<h2 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h2><ul>
<li>v-show的用法和v-if的用法非常相似，也用于决定一个元素是否渲染</li>
<li>该如何选择呢？<ul>
<li>v-if当条件为false时，压根不会有对应的元素在DOM中</li>
<li>v-show当条件为false，仅仅是将元素的display属性设置为none而已</li>
<li>当需要在显示与隐藏之间切换很频繁时使用v-show，否则使用v-if</li>
</ul>
</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">			 v-if：当我们条件为false时，包含v-if指令的元素，根本就不会存在dom中</span></span><br><span class="line"><span class="comment">			 v-show：相反，会存在dom中，只是给元素添加了一个行内样式：display:none</span></span><br><span class="line"><span class="comment">			 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-if</span>=<span class="string">"isShow"</span> <span class="attr">id</span>=<span class="string">"aaa"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-show</span>=<span class="string">"isShow"</span> <span class="attr">id</span>=<span class="string">"bbb"</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">			<span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">				el: <span class="string">'#app'</span>,</span></span><br><span class="line">				data: &#123;</span><br><span class="line"><span class="actionscript">					message: <span class="string">'你好'</span>,</span></span><br><span class="line"><span class="actionscript">					isShow: <span class="literal">true</span></span></span><br><span class="line">				&#125;,</span><br><span class="line">				computed: &#123;&#125;,</span><br><span class="line">				methods: &#123;&#125;</span><br><span class="line">			&#125;)</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h2><p>遍历数组</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in names"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">			<span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">				el: <span class="string">'#app'</span>,</span></span><br><span class="line">				data: &#123;</span><br><span class="line"><span class="actionscript">					names: [<span class="string">'why'</span>,<span class="string">'kobe'</span>,<span class="string">'james'</span>,<span class="string">'curry'</span>]</span></span><br><span class="line">				&#125;,</span><br><span class="line">				computed: &#123;&#125;,</span><br><span class="line">				methods: &#123;&#125;</span><br><span class="line">			&#125;)</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>遍历对象</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 1.在遍历对象的过程中，如果只是获取一个值，那么获取到的是value --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in info"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">			</span><br><span class="line">			<span class="comment">&lt;!-- 2.获取key和value 格式： (value,key) --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(value,key) in info"</span>&gt;</span>&#123;&#123;key&#125;&#125;-&#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">			</span><br><span class="line">			<span class="comment">&lt;!-- 3.获取key和value和index 格式：(value,key,index) --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(value,key,index) in info"</span>&gt;</span>&#123;&#123;index&#125;&#125;-&#123;&#123;key&#125;&#125;--&#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">			<span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">				el: <span class="string">'#app'</span>,</span></span><br><span class="line">				data: &#123;</span><br><span class="line">					info:&#123;</span><br><span class="line"><span class="actionscript">						name: <span class="string">'wht'</span>,</span></span><br><span class="line">						age: 18,</span><br><span class="line">						height: 1.88</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;,</span><br><span class="line">				computed: &#123;&#125;,</span><br><span class="line">				methods: &#123;&#125;</span><br><span class="line">			&#125;)</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h2><p><strong>如何使用</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"message"</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">			<span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">				el: <span class="string">'#app'</span>,</span></span><br><span class="line">				data: &#123;</span><br><span class="line"><span class="actionscript">					message: <span class="string">'你好'</span></span></span><br><span class="line">				&#125;,</span><br><span class="line">				computed: &#123;&#125;,</span><br><span class="line">				methods: &#123;&#125;</span><br><span class="line">			&#125;)</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>v-model相当于是一个双向绑定，意思是input值如果被修改了，那么被绑定的message的值也会被修改，同理message的值被修改了，input的值也会被修改</p>
</blockquote>
<p><strong>原理</strong></p>
<ul>
<li>v-model其实是一个语法糖，它的背后本质上是包含两个操作：<ul>
<li>v-bind绑定一个value属性</li>
<li>v-on指令给当前元素绑定input事件</li>
</ul>
</li>
<li>也就是说下面的代码：等同于下面的代码：</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"message"</span> <span class="attr">v-on:input</span>=<span class="string">"valueChange"</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">			<span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">				el: <span class="string">'#app'</span>,</span></span><br><span class="line">				data: &#123;</span><br><span class="line"><span class="actionscript">					message: <span class="string">'你好'</span></span></span><br><span class="line">				&#125;,</span><br><span class="line">				computed: &#123;&#125;,</span><br><span class="line">				methods: &#123;</span><br><span class="line">					valueChange(event)&#123;</span><br><span class="line"><span class="actionscript">						<span class="keyword">this</span>.message = event.target.value</span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;)</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="v-model结合radio"><a href="#v-model结合radio" class="headerlink" title="v-model结合radio"></a>v-model结合radio</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"man"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"man"</span> <span class="attr">v-model</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"男"</span> /&gt;</span>男</span><br><span class="line">			<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"woman"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"woman"</span> <span class="attr">v-model</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"女"</span> /&gt;</span>女</span><br><span class="line">			<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h1</span>&gt;</span>你选择的是: &#123;&#123;sex&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">			<span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">				el: <span class="string">'#app'</span>,</span></span><br><span class="line">				data: &#123;</span><br><span class="line"><span class="actionscript">					message: <span class="string">'你好'</span>,</span></span><br><span class="line"><span class="actionscript">					sex: <span class="string">''</span></span></span><br><span class="line">				&#125;,</span><br><span class="line">				computed: &#123;&#125;,</span><br><span class="line">				methods: &#123;&#125;</span><br><span class="line">			&#125;)</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>以前写单选按钮的时候需要设置 input 的 name属性 为相同，才能达到单选按钮效果，现在使用v-model也是一样的，同时还完成了双向绑定的效果</p>
</blockquote>
<h3 id="v-model结合checkbox"><a href="#v-model结合checkbox" class="headerlink" title="v-model结合checkbox"></a>v-model结合checkbox</h3><p>单选</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"agreement"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"agreement"</span> <span class="attr">v-model</span>=<span class="string">"isAgreement"</span>/&gt;</span>同意协议</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>你选择的是:&#123;&#123;isAgreement&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">:disabled</span>=<span class="string">"!isAgreement"</span>&gt;</span>下一步<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>多选</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- checkbox 多选框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>  <span class="attr">value</span>=<span class="string">"唱"</span> <span class="attr">v-model</span>=<span class="string">"hobbies"</span>/&gt;</span>唱</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>  <span class="attr">value</span>=<span class="string">"跳"</span> <span class="attr">v-model</span>=<span class="string">"hobbies"</span>/&gt;</span>跳</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>  <span class="attr">value</span>=<span class="string">"rap"</span> <span class="attr">v-model</span>=<span class="string">"hobbies"</span>/&gt;</span>rap</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>  <span class="attr">value</span>=<span class="string">"篮球"</span> <span class="attr">v-model</span>=<span class="string">"hobbies"</span>/&gt;</span>篮球</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>  <span class="attr">value</span>=<span class="string">"music"</span> <span class="attr">v-model</span>=<span class="string">"hobbies"</span>/&gt;</span>music</span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>你的爱好是:&#123;&#123;hobbies&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">	<span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">		el: <span class="string">'#app'</span>,</span></span><br><span class="line">		data: &#123;</span><br><span class="line"><span class="actionscript">			message: <span class="string">'你好'</span>,</span></span><br><span class="line"><span class="actionscript">			isAgreement: <span class="string">''</span>,</span></span><br><span class="line">			hobbies: []</span><br><span class="line">		&#125;,</span><br><span class="line">		computed: &#123;&#125;,</span><br><span class="line">		methods: &#123;&#125;</span><br><span class="line">	&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="v-model结合select"><a href="#v-model结合select" class="headerlink" title="v-model结合select"></a>v-model结合select</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">			</span><br><span class="line">			<span class="comment">&lt;!-- 选择一个 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"abc"</span> <span class="attr">v-model</span>=<span class="string">"fruit"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"aaa"</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"bbb"</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"ccc"</span>&gt;</span>ccc<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"ddd"</span>&gt;</span>ddd<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"eee"</span>&gt;</span>eee<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h1</span>&gt;</span>你选中的是:&#123;&#123;fruit&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">			</span><br><span class="line">			<span class="comment">&lt;!-- 选择多个 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"abc"</span> <span class="attr">v-model</span>=<span class="string">"fruits"</span> <span class="attr">multiple</span>=<span class="string">"multiple"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"aaa"</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"bbb"</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"ccc"</span>&gt;</span>ccc<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"ddd"</span>&gt;</span>ddd<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"eee"</span>&gt;</span>eee<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h1</span>&gt;</span>你选中的是:&#123;&#123;fruits&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">			<span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">				el: <span class="string">'#app'</span>,</span></span><br><span class="line">				data: &#123;</span><br><span class="line"><span class="actionscript">					message: <span class="string">'你好'</span>,</span></span><br><span class="line"><span class="actionscript">					fruit: <span class="string">'aaa'</span>,</span></span><br><span class="line">					fruits: []</span><br><span class="line">				&#125;,</span><br><span class="line">				computed: &#123;&#125;,</span><br><span class="line">				methods: &#123;&#125;</span><br><span class="line">			&#125;)</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="值绑定"><a href="#值绑定" class="headerlink" title="值绑定"></a>值绑定</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">v-for</span>=<span class="string">"item in orginHobbies"</span> <span class="attr">:for</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">:value</span>=<span class="string">"item"</span> <span class="attr">:id</span>=<span class="string">"item"</span> <span class="attr">v-model</span>=<span class="string">"hobbies"</span> /&gt;</span>&#123;&#123;item&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">	<span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">	el: <span class="string">'#app'</span>,</span></span><br><span class="line">	data: &#123;</span><br><span class="line"><span class="actionscript">		message: <span class="string">'你好'</span>,</span></span><br><span class="line"><span class="actionscript">		isAgreement: <span class="string">''</span>,</span></span><br><span class="line">		hobbies: [],</span><br><span class="line"><span class="actionscript">		orginHobbies: [<span class="string">'唱'</span>,<span class="string">'跳'</span>,<span class="string">'rap'</span>,<span class="string">'篮球'</span>,<span class="string">'music'</span>]</span></span><br><span class="line">	&#125;,</span><br><span class="line">	computed: &#123;&#125;,</span><br><span class="line">	methods: &#123;&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>给value动态绑定</p>
<h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><h3 id="lazy，number，trim"><a href="#lazy，number，trim" class="headerlink" title="lazy，number，trim"></a>lazy，number，trim</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1.修饰符 lazy 设置失去焦点后再进行双向绑定 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model.lazy</span>=<span class="string">"message"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">			</span><br><span class="line"><span class="comment">&lt;!-- 2.修饰符 number 设置input值类型为number类型 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">v-model.number</span>=<span class="string">"age"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;typeof age&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">			</span><br><span class="line"><span class="comment">&lt;!-- 3.修饰符 trim 去除前后空格--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model.trim</span>=<span class="string">"name"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure></div>



<h1 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h1><p>computed: 计算属性()</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">	<span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">		el: <span class="string">'#app'</span>,</span></span><br><span class="line">		data: &#123;</span><br><span class="line"><span class="actionscript">			firstName: <span class="string">'Lebron'</span>,</span></span><br><span class="line"><span class="actionscript">			lastName: <span class="string">'James'</span></span></span><br><span class="line">		&#125;,</span><br><span class="line"><span class="actionscript">		<span class="comment">// computed: 计算属性()</span></span></span><br><span class="line">		computed:&#123;</span><br><span class="line"><span class="actionscript">			fullName: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">				<span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">' '</span> + <span class="keyword">this</span>.lastName</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;,</span><br><span class="line">		methods: &#123;&#125;</span><br><span class="line">	&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>以属性的方式来调用 </p>
<p>案例计算总价：</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h2</span>&gt;</span>总价格：&#123;&#123;totalPrice&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">			<span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">				el: <span class="string">'#app'</span>,</span></span><br><span class="line">				data: &#123;</span><br><span class="line">					books: [</span><br><span class="line"><span class="actionscript">						&#123;id: <span class="number">1</span>,name: <span class="string">'aaa'</span>,price: <span class="number">119</span>&#125;,</span></span><br><span class="line"><span class="actionscript">						&#123;id: <span class="number">2</span>,name: <span class="string">'bbb'</span>,price: <span class="number">23</span>&#125;,</span></span><br><span class="line"><span class="actionscript">						&#123;id: <span class="number">3</span>,name: <span class="string">'ccc'</span>,price: <span class="number">4125</span>&#125;,</span></span><br><span class="line"><span class="actionscript">						&#123;id: <span class="number">4</span>,name: <span class="string">'ddd'</span>,price: <span class="number">645</span>&#125;,</span></span><br><span class="line"><span class="actionscript">						&#123;id: <span class="number">5</span>,name: <span class="string">'eee'</span>,price: <span class="number">23</span>&#125;,</span></span><br><span class="line"><span class="actionscript">						&#123;id: <span class="number">6</span>,name: <span class="string">'fff'</span>,price: <span class="number">7</span>&#125;</span></span><br><span class="line">					]</span><br><span class="line">				&#125;,</span><br><span class="line">				computed:&#123;</span><br><span class="line"><span class="actionscript">					totalPrice: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">						<span class="keyword">let</span> result = <span class="number">0</span></span></span><br><span class="line">						/* for(let i=0; i &lt; this.books.length; i++)&#123;</span><br><span class="line"><span class="actionscript">							result += <span class="keyword">this</span>.books[i].price</span></span><br><span class="line">						&#125;</span><br><span class="line"><span class="actionscript">						<span class="keyword">return</span> result */</span></span><br><span class="line">						</span><br><span class="line">						/* for(let i in this.books)&#123;</span><br><span class="line"><span class="actionscript">							result += <span class="keyword">this</span>.books[i].price</span></span><br><span class="line">						&#125;</span><br><span class="line"><span class="actionscript">						<span class="keyword">return</span> result */</span></span><br><span class="line">						</span><br><span class="line"><span class="javascript">						<span class="keyword">for</span>(<span class="keyword">let</span> book <span class="keyword">of</span> <span class="keyword">this</span>.books)&#123;</span></span><br><span class="line">							result += book.price</span><br><span class="line">						&#125;</span><br><span class="line"><span class="actionscript">						<span class="keyword">return</span> result</span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;,</span><br><span class="line">				methods: &#123;</span><br><span class="line">					</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;)</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><strong>计算属性的setter和getter</strong></p>
<p>计算属性的本质，完整代码</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">			<span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">				el: <span class="string">'#app'</span>,</span></span><br><span class="line">				data: &#123;</span><br><span class="line"><span class="actionscript">					firstName: <span class="string">'Kobe'</span>,</span></span><br><span class="line"><span class="actionscript">					lastName: <span class="string">'Bryant'</span></span></span><br><span class="line">				&#125;,</span><br><span class="line"><span class="actionscript">				<span class="comment">//计算属性一般是没有set方法，只有只读属性</span></span></span><br><span class="line">				computed: &#123;</span><br><span class="line">					fullName: &#123;</span><br><span class="line"><span class="actionscript">						<span class="keyword">set</span>: <span class="function"><span class="keyword">function</span><span class="params">(newValue)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">							<span class="built_in">console</span>.log(<span class="string">'-------'</span>,newValue);</span></span><br><span class="line"><span class="actionscript">							<span class="keyword">const</span> names = newValue.split(<span class="string">' '</span>);</span></span><br><span class="line"><span class="actionscript">							<span class="keyword">this</span>.firstName = names[<span class="number">0</span>];</span></span><br><span class="line"><span class="actionscript">							<span class="keyword">this</span>.lastName = names[<span class="number">1</span>];</span></span><br><span class="line">						&#125;,</span><br><span class="line"><span class="actionscript">						<span class="keyword">get</span>: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">							<span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">' '</span> + <span class="keyword">this</span>.lastName</span></span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;,</span><br><span class="line">				methods: &#123;&#125;</span><br><span class="line">			&#125;)</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>但是这样写没有必要，缩写</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fullName: &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">' '</span> + <span class="keyword">this</span>.lastName</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><strong>计算属性computed和方法methods的区别</strong></p>
<p>两种方式语法没有太大区别，但是性能有很大差异</p>
<p>computed中定义的的函数如果在重复调用的时候，它会检测需求数据是否改变，如果没有，将显示上一次结果，而methods不会</p>
</blockquote>
<p><strong>计算属性的缓存</strong></p>
<h1 id="let-var"><a href="#let-var" class="headerlink" title="let/var"></a>let/var</h1><ul>
<li><p>事实上var的设计可以看成JavaScript语言设计上的错误。但是这种错误多半不能修复和移除，因为需要向后兼容</p>
<ul>
<li>大概十年前，Brendan Eich就决定修复这个问题，于是他添加了一个新的关键字：let</li>
<li>我们可以将let看成更完美的var</li>
</ul>
</li>
<li><p>块级作用域</p>
<ul>
<li>JS中使用var来声明一个变量时，变量的作用域主要是和函数有关</li>
<li>针对于其他块定义来说是没有作用域的，比如if/for等，这在我们开发中往往会引起一些问题</li>
</ul>
</li>
</ul>
<blockquote>
<p>ES5之前因为if和for都没有块级作用域的概念，所以在很多时候，我们的必须借助于function的作用域来解决外面变量的问题</p>
<p>ES6中加入了let，let它是有if和for的块级作用域</p>
</blockquote>
<p><strong>没有作用域</strong></p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span>&gt;</span>1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span>&gt;</span>2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span>&gt;</span>3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span>&gt;</span>4<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span>&gt;</span>5<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">	<span class="keyword">var</span> btns = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'button'</span>)</span></span><br><span class="line"><span class="actionscript">	<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;btns.length; i++)&#123;</span></span><br><span class="line"><span class="actionscript">		btns[i].addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">			<span class="built_in">console</span>.log(<span class="string">'第'</span> + i + <span class="string">'个按钮被点击'</span>)</span></span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>当点击第一个按钮的时候</p>
<p><a href="/2020/02/22/Vue/image-20200218102611964.png" data-fancybox="group" data-caption="image-20200218102611964" class="fancybox"><img alt="image-20200218102611964" title="image-20200218102611964" data-src="/2020/02/22/Vue/image-20200218102611964.png" class="lazyload"></a></p>
<p>输出的却是第五个按钮</p>
<p><a href="/2020/02/22/Vue/image-20200218102631370.png" data-fancybox="group" data-caption="image-20200218102631370" class="fancybox"><img alt="image-20200218102631370" title="image-20200218102631370" data-src="/2020/02/22/Vue/image-20200218102631370.png" class="lazyload"></a></p>
<p><strong>ES5中改正写法</strong></p>
<p>闭包写法，因为function是有块级作用域的</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">	<span class="keyword">var</span> btns = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'button'</span>)</span></span><br><span class="line"><span class="javascript">	<span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;btns.length; i++)&#123;</span></span><br><span class="line"><span class="actionscript">		(<span class="function"><span class="keyword">function</span><span class="params">(i)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">            btns[i].addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">'第'</span> + i + <span class="string">'个按钮被点击'</span>);</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)(i)</span><br><span class="line">	&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><strong>ES6中写法</strong></p>
<p>将var改成let</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">	<span class="keyword">var</span> btns = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'button'</span>)</span></span><br><span class="line"><span class="javascript">	<span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;btns.length; i++)&#123;</span></span><br><span class="line"><span class="actionscript">		btns[i].addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">			<span class="built_in">console</span>.log(<span class="string">'第'</span> + i + <span class="string">'个按钮被点击'</span>)</span></span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>就恢复正常了</p>
<blockquote>
<p>因为使用var声明i的时候，它是没有作用域的，在for循环的时候当循环到最后一个数时，就将i改成了最终值，而let是有块级作用域的，其他函数的改变并不会影响自身</p>
</blockquote>
<h1 id="const"><a href="#const" class="headerlink" title="const"></a>const</h1><ul>
<li><p>const关键字</p>
<ul>
<li>在很多语言中已经存在，比如C/C++中，主要的作用是将某个变量修饰为常量</li>
<li>在JavaScript中也是如此，使用const修饰的标识符为常量，不可以再次赋值</li>
</ul>
</li>
<li><p>什么时候使用const呢？</p>
<ul>
<li>当我们修饰的标识符不会被再次赋值的时候，就可以使用const来保证数据的安全性</li>
</ul>
</li>
<li><p>建议：在ES6开发中，优先使用const，只有需要改变某一个标识符的时候才使用let</p>
</li>
</ul>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.注意一： 一旦给const修饰的标识符被赋值之后，不能修改</span></span><br><span class="line"><span class="comment">// const name = 'why';</span></span><br><span class="line"><span class="comment">// name = 'aaa';</span></span><br><span class="line">			</span><br><span class="line"><span class="comment">// 2.注意二：在使用const定义标识符，必须进行赋值</span></span><br><span class="line">			<span class="comment">// const name;</span></span><br><span class="line">			</span><br><span class="line"><span class="comment">// 3.注意三：常量的含义是指向的对象不能修改，但是可以改变对象内部的属性</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">	name: <span class="string">'why'</span>,</span><br><span class="line">	age: <span class="number">18</span>,</span><br><span class="line">	height: <span class="number">1.88</span></span><br><span class="line">&#125;</span><br><span class="line">			</span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br><span class="line">			</span><br><span class="line">obj.name = <span class="string">'kobe'</span>;</span><br><span class="line">obj.age = <span class="number">40</span>;</span><br><span class="line">obj.height = <span class="number">1.87</span>;</span><br><span class="line">			</span><br><span class="line"><span class="built_in">console</span>.log(obj)</span><br></pre></td></tr></table></figure></div>

<h1 id="增强写法"><a href="#增强写法" class="headerlink" title="增强写法"></a>增强写法</h1><p>对象字面量增强写法</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 平常写法</span></span><br><span class="line"><span class="keyword">const</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>()</span><br><span class="line">			</span><br><span class="line"><span class="comment">// 字面量写法</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">	name: <span class="string">'why'</span>,</span><br><span class="line">	age: <span class="number">18</span>,</span><br><span class="line">	fun: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">'在奔跑'</span>)</span><br><span class="line">	&#125;,</span><br><span class="line">	eat: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">'在吃东西'</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.属性的增强写法</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">'why'</span>;</span><br><span class="line"><span class="keyword">const</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">const</span> height = <span class="number">1.88</span></span><br><span class="line">			</span><br><span class="line"><span class="comment">// ES5的写法</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">	name: name,</span><br><span class="line">	age: age,</span><br><span class="line">	height: height</span><br><span class="line">&#125;</span><br><span class="line">			</span><br><span class="line"><span class="comment">// ES6写法</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">	name,</span><br><span class="line">	age,</span><br><span class="line">	height</span><br><span class="line">&#125;</span><br><span class="line">			</span><br><span class="line"><span class="built_in">console</span>.log(obj)</span><br><span class="line">			</span><br><span class="line"><span class="comment">// 2.函数的增强写法</span></span><br><span class="line">			</span><br><span class="line"><span class="comment">// ES5写法</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">	run: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">					</span><br><span class="line">	&#125;,</span><br><span class="line">	eat: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">					</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">			</span><br><span class="line"><span class="comment">// ES6写法</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">	run()&#123;</span><br><span class="line">					</span><br><span class="line">	&#125;,</span><br><span class="line">	eat()&#123;</span><br><span class="line">					</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h1><ul>
<li>在前端开发中，我们需要经常和用户交互。<ul>
<li>这个时候，我们就必须监听用户发生的时间，比如点击、拖拽、键盘事件等等</li>
<li>在Vue中如何使用监听事件呢？使用v-on指令</li>
</ul>
</li>
<li>v-on介绍<ul>
<li>作用：绑定事件监听器</li>
<li>缩写：@</li>
<li>预期：Function | Inline Statement | Object</li>
<li>参数：event</li>
</ul>
</li>
</ul>
<h1 id="input输入框问题"><a href="#input输入框问题" class="headerlink" title="input输入框问题"></a>input输入框问题</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">"isUser"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"username"</span>&gt;</span>用户账号<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">placeholder</span>=<span class="string">"用户账号"</span> <span class="attr">key</span>=<span class="string">"username"</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"email"</span>&gt;</span>用户邮箱<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"email"</span> <span class="attr">placeholder</span>=<span class="string">"用户邮箱"</span> <span class="attr">key</span>=<span class="string">"email"</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- &lt;button @click="btnClick"&gt;切换类型&lt;/button&gt; --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"isUser = !isUser"</span>&gt;</span>切换类型<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">			<span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">				el: <span class="string">'#app'</span>,</span></span><br><span class="line">				data: &#123;</span><br><span class="line"><span class="actionscript">					message: <span class="string">'你好'</span>,</span></span><br><span class="line"><span class="actionscript">					isUser: <span class="literal">true</span></span></span><br><span class="line">				&#125;,</span><br><span class="line">				computed: &#123;&#125;,</span><br><span class="line">				methods: &#123;</span><br><span class="line">					btnClick() &#123;</span><br><span class="line"><span class="actionscript">						<span class="keyword">this</span>.isUser = !<span class="keyword">this</span>.isUser</span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;)</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>点击切换，用户之前在输入框中输入的数据没有被清除，给input标签加一个key属性，属性值不同及不会保留</p>
<h1 id="组件的key属性"><a href="#组件的key属性" class="headerlink" title="组件的key属性"></a>组件的key属性</h1><p>key属性使用item，不然达不到效果</p>
<p><a href="/2020/02/22/Vue/image-20200219162422793.png" data-fancybox="group" data-caption="image-20200219162422793" class="fancybox"><img alt="image-20200219162422793" title="image-20200219162422793" data-src="/2020/02/22/Vue/image-20200219162422793.png" class="lazyload"></a></p>
<h1 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h1><h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><p>如果有一个需求是需要你将一个数组里大于 n 的数字取出来，那么你可以使用 filter函数</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> nums = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">100</span>]</span><br><span class="line"><span class="keyword">let</span> nums2 = nums.filter(<span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> n &lt; <span class="number">50</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(nums2)</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>filter 的参数为回调函数，意思就是你的数组有多少位，这个函数就回调几次，回调函数中的 n 为数组的值</p>
<p>filter的返回值只能是一个boolean 值 ，为true则将返回的值添加到一个新的数组中，声明 nums2 接收</p>
</blockquote>
<h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>接着上述需求，还需要将刚刚求出来的值进行 * 2 的操作，那么就可以使用map函数</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> nums3 = nums2.map(<span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line"> 	<span class="keyword">return</span> n * <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(nums3)</span><br></pre></td></tr></table></figure></div>

<p>参数也是回调函数，n 的值也是为数组的值，只不过返回值可以做运算</p>
<h2 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h2><p>接着上述要求，还需要进行一个汇总，那么就可以使用 reduce函数</p>
<p>这个函数和上面两个有点不同</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> nums4 = nums3.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prevValue,n</span>)</span>&#123;</span><br><span class="line"> 	<span class="keyword">return</span> prevValue + n</span><br><span class="line">&#125;,<span class="number">0</span>)</span><br><span class="line"><span class="built_in">console</span>.log(nums4)</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>参数依然是回调函数，但是回调函数中多了一个参数，prevValue 表示上一次运行的结果，n 表示 数组里面的值</p>
<p>后面的 0 表示为 prevValue 的初始值，</p>
</blockquote>
<h2 id="简洁写法"><a href="#简洁写法" class="headerlink" title="简洁写法"></a>简洁写法</h2><p>上述要求简洁写法（链式调用）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> nums2 = nums.filter(<span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> n &lt; <span class="number">50</span></span><br><span class="line">&#125;).map(<span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> n * <span class="number">2</span></span><br><span class="line">&#125;).reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prevValue,n</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> prevValue + n</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(nums2)</span><br></pre></td></tr></table></figure></div>

<p>更简洁写法（箭头函数）</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(nums.filter(<span class="function"><span class="params">n</span> =&gt;</span> n &lt; <span class="number">50</span>).map(<span class="function"><span class="params">n</span> =&gt;</span> n * <span class="number">2</span>).reduce(<span class="function">(<span class="params">prevValue,n</span>) =&gt;</span> prevValue + n))</span><br></pre></td></tr></table></figure></div>

]]></content>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
</search>
